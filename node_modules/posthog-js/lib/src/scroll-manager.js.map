{"version":3,"file":"scroll-manager.js","sourceRoot":"","sources":["../../src/scroll-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { window } from './utils/globals'\nimport { PostHog } from './posthog-core'\nimport { isArray } from './utils/type-utils'\n\nexport interface ScrollContext {\n    // scroll is how far down the page the user has scrolled,\n    // content is how far down the page the user can view content\n    // (e.g. if the page is 1000 tall, but the user's screen is only 500 tall,\n    // and they don't scroll at all, then scroll is 0 and content is 500)\n    maxScrollHeight?: number\n    maxScrollY?: number\n    lastScrollY?: number\n    maxContentHeight?: number\n    maxContentY?: number\n    lastContentY?: number\n}\n\n// This class is responsible for tracking scroll events and maintaining the scroll context\nexport class ScrollManager {\n    private context: ScrollContext | undefined\n\n    constructor(private instance: PostHog) {}\n\n    getContext(): ScrollContext | undefined {\n        return this.context\n    }\n\n    resetContext(): ScrollContext | undefined {\n        const ctx = this.context\n\n        // update the scroll properties for the new page, but wait until the next tick\n        // of the event loop\n        setTimeout(this._updateScrollData, 0)\n\n        return ctx\n    }\n\n    private _updateScrollData = () => {\n        if (!this.context) {\n            this.context = {}\n        }\n\n        const el = this.scrollElement()\n\n        const scrollY = this.scrollY()\n        const scrollHeight = el ? Math.max(0, el.scrollHeight - el.clientHeight) : 0\n        const contentY = scrollY + (el?.clientHeight || 0)\n        const contentHeight = el?.scrollHeight || 0\n\n        this.context.lastScrollY = Math.ceil(scrollY)\n        this.context.maxScrollY = Math.max(scrollY, this.context.maxScrollY ?? 0)\n        this.context.maxScrollHeight = Math.max(scrollHeight, this.context.maxScrollHeight ?? 0)\n\n        this.context.lastContentY = contentY\n        this.context.maxContentY = Math.max(contentY, this.context.maxContentY ?? 0)\n        this.context.maxContentHeight = Math.max(contentHeight, this.context.maxContentHeight ?? 0)\n    }\n\n    startMeasuringScrollPosition() {\n        // setting the third argument to `true` means that we will receive scroll events for other scrollable elements\n        // on the page, not just the window\n        // see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#usecapture\n        window?.addEventListener('scroll', this._updateScrollData, true)\n        window?.addEventListener('scrollend', this._updateScrollData, true)\n        window?.addEventListener('resize', this._updateScrollData)\n    }\n\n    public scrollElement(): Element | undefined {\n        if (this.instance.config.scroll_root_selector) {\n            const selectors = isArray(this.instance.config.scroll_root_selector)\n                ? this.instance.config.scroll_root_selector\n                : [this.instance.config.scroll_root_selector]\n            for (const selector of selectors) {\n                const element = window?.document.querySelector(selector)\n                if (element) {\n                    return element\n                }\n            }\n            return undefined\n        } else {\n            return window?.document.documentElement\n        }\n    }\n\n    public scrollY(): number {\n        if (this.instance.config.scroll_root_selector) {\n            const element = this.scrollElement()\n            return (element && element.scrollTop) || 0\n        } else {\n            return window ? window.scrollY || window.pageYOffset || window.document.documentElement.scrollTop || 0 : 0\n        }\n    }\n\n    public scrollX(): number {\n        if (this.instance.config.scroll_root_selector) {\n            const element = this.scrollElement()\n            return (element && element.scrollLeft) || 0\n        } else {\n            return window ? window.scrollX || window.pageXOffset || window.document.documentElement.scrollLeft || 0 : 0\n        }\n    }\n}\n"]}