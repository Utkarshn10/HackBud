{"version":3,"file":"consent.js","sourceRoot":"","sources":["../../src/consent.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { find, includes } from './utils'\nimport { assignableWindow, navigator } from './utils/globals'\nimport { cookieStore, localStore } from './storage'\nimport { PersistentStore } from './types'\n\nconst OPT_OUT_PREFIX = '__ph_opt_in_out_'\n\nexport enum ConsentStatus {\n    PENDING = -1,\n    DENIED = 0,\n    GRANTED = 1,\n}\n\n/**\n * ConsentManager provides tools for managing user consent as configured by the application.\n */\nexport class ConsentManager {\n    private _storage?: PersistentStore\n\n    constructor(private instance: PostHog) {}\n\n    private get config() {\n        return this.instance.config\n    }\n\n    public get consent(): ConsentStatus {\n        if (this.getDnt()) {\n            return ConsentStatus.DENIED\n        }\n\n        return this.storedConsent\n    }\n\n    public isOptedOut() {\n        return (\n            this.consent === ConsentStatus.DENIED ||\n            (this.consent === ConsentStatus.PENDING && this.config.opt_out_capturing_by_default)\n        )\n    }\n\n    public isOptedIn() {\n        return !this.isOptedOut()\n    }\n\n    public optInOut(isOptedIn: boolean) {\n        this.storage.set(\n            this.storageKey,\n            isOptedIn ? 1 : 0,\n            this.config.cookie_expiration,\n            this.config.cross_subdomain_cookie,\n            this.config.secure_cookie\n        )\n    }\n\n    public reset() {\n        this.storage.remove(this.storageKey, this.config.cross_subdomain_cookie)\n    }\n\n    private get storageKey() {\n        const { token, opt_out_capturing_cookie_prefix } = this.instance.config\n        return (opt_out_capturing_cookie_prefix || OPT_OUT_PREFIX) + token\n    }\n\n    private get storedConsent(): ConsentStatus {\n        const value = this.storage.get(this.storageKey)\n        return value === '1' ? ConsentStatus.GRANTED : value === '0' ? ConsentStatus.DENIED : ConsentStatus.PENDING\n    }\n\n    private get storage() {\n        if (!this._storage) {\n            const persistenceType = this.config.opt_out_capturing_persistence_type\n            this._storage = persistenceType === 'localStorage' ? localStore : cookieStore\n            const otherStorage = persistenceType === 'localStorage' ? cookieStore : localStore\n\n            if (otherStorage.get(this.storageKey)) {\n                if (!this._storage.get(this.storageKey)) {\n                    // This indicates we have moved to a new storage format so we migrate the value over\n                    this.optInOut(otherStorage.get(this.storageKey) === '1')\n                }\n\n                otherStorage.remove(this.storageKey, this.config.cross_subdomain_cookie)\n            }\n        }\n\n        return this._storage\n    }\n\n    private getDnt(): boolean {\n        if (!this.config.respect_dnt) {\n            return false\n        }\n        return !!find(\n            [\n                navigator?.doNotTrack, // standard\n                (navigator as any)?.['msDoNotTrack'],\n                assignableWindow['doNotTrack'],\n            ],\n            (dntValue): boolean => {\n                return includes([true, 1, '1', 'yes'], dntValue)\n            }\n        )\n    }\n}\n"]}