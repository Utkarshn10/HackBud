{"version":3,"file":"posthog-featureflags.js","sourceRoot":"","sources":["../../src/posthog-featureflags.ts"],"names":[],"mappings":"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","sourcesContent":["import { entries, extend } from './utils'\nimport { PostHog } from './posthog-core'\nimport {\n    DecideResponse,\n    FeatureFlagsCallback,\n    EarlyAccessFeatureCallback,\n    EarlyAccessFeatureResponse,\n    Properties,\n    JsonType,\n    Compression,\n} from './types'\nimport { PostHogPersistence } from './posthog-persistence'\n\nimport {\n    PERSISTENCE_EARLY_ACCESS_FEATURES,\n    ENABLED_FEATURE_FLAGS,\n    STORED_GROUP_PROPERTIES_KEY,\n    STORED_PERSON_PROPERTIES_KEY,\n    FLAG_CALL_REPORTED,\n} from './constants'\n\nimport { isArray } from './utils/type-utils'\nimport { logger } from './utils/logger'\n\nconst PERSISTENCE_ACTIVE_FEATURE_FLAGS = '$active_feature_flags'\nconst PERSISTENCE_OVERRIDE_FEATURE_FLAGS = '$override_feature_flags'\nconst PERSISTENCE_FEATURE_FLAG_PAYLOADS = '$feature_flag_payloads'\n\nexport const filterActiveFeatureFlags = (featureFlags?: Record<string, string | boolean>) => {\n    const activeFeatureFlags: Record<string, string | boolean> = {}\n    for (const [key, value] of entries(featureFlags || {})) {\n        if (value) {\n            activeFeatureFlags[key] = value\n        }\n    }\n    return activeFeatureFlags\n}\n\nexport const parseFeatureFlagDecideResponse = (\n    response: Partial<DecideResponse>,\n    persistence: PostHogPersistence,\n    currentFlags: Record<string, string | boolean> = {},\n    currentFlagPayloads: Record<string, JsonType> = {}\n) => {\n    const flags = response['featureFlags']\n    const flagPayloads = response['featureFlagPayloads']\n    if (!flags) {\n        return\n    }\n    // using the v1 api\n    if (isArray(flags)) {\n        const $enabled_feature_flags: Record<string, boolean> = {}\n        if (flags) {\n            for (let i = 0; i < flags.length; i++) {\n                $enabled_feature_flags[flags[i]] = true\n            }\n        }\n        persistence &&\n            persistence.register({\n                [PERSISTENCE_ACTIVE_FEATURE_FLAGS]: flags,\n                [ENABLED_FEATURE_FLAGS]: $enabled_feature_flags,\n            })\n        return\n    }\n\n    // using the v2+ api\n    let newFeatureFlags = flags\n    let newFeatureFlagPayloads = flagPayloads\n    if (response.errorsWhileComputingFlags) {\n        // if not all flags were computed, we upsert flags instead of replacing them\n        newFeatureFlags = { ...currentFlags, ...newFeatureFlags }\n        newFeatureFlagPayloads = { ...currentFlagPayloads, ...newFeatureFlagPayloads }\n    }\n    persistence &&\n        persistence.register({\n            [PERSISTENCE_ACTIVE_FEATURE_FLAGS]: Object.keys(filterActiveFeatureFlags(newFeatureFlags)),\n            [ENABLED_FEATURE_FLAGS]: newFeatureFlags || {},\n            [PERSISTENCE_FEATURE_FLAG_PAYLOADS]: newFeatureFlagPayloads || {},\n        })\n}\n\nexport class PostHogFeatureFlags {\n    instance: PostHog\n    _override_warning: boolean\n    featureFlagEventHandlers: FeatureFlagsCallback[]\n    reloadFeatureFlagsQueued: boolean\n    reloadFeatureFlagsInAction: boolean\n    $anon_distinct_id: string | undefined\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        this._override_warning = false\n        this.featureFlagEventHandlers = []\n\n        this.reloadFeatureFlagsQueued = false\n        this.reloadFeatureFlagsInAction = false\n    }\n\n    getFlags(): string[] {\n        return Object.keys(this.getFlagVariants())\n    }\n\n    getFlagVariants(): Record<string, string | boolean> {\n        const enabledFlags = this.instance.get_property(ENABLED_FEATURE_FLAGS)\n        const overriddenFlags = this.instance.get_property(PERSISTENCE_OVERRIDE_FEATURE_FLAGS)\n        if (!overriddenFlags) {\n            return enabledFlags || {}\n        }\n\n        const finalFlags = extend({}, enabledFlags)\n        const overriddenKeys = Object.keys(overriddenFlags)\n        for (let i = 0; i < overriddenKeys.length; i++) {\n            finalFlags[overriddenKeys[i]] = overriddenFlags[overriddenKeys[i]]\n        }\n        if (!this._override_warning) {\n            logger.warn(' Overriding feature flags!', {\n                enabledFlags,\n                overriddenFlags,\n                finalFlags,\n            })\n            this._override_warning = true\n        }\n        return finalFlags\n    }\n\n    getFlagPayloads(): Record<string, JsonType> {\n        const flagPayloads = this.instance.get_property(PERSISTENCE_FEATURE_FLAG_PAYLOADS)\n        return flagPayloads || {}\n    }\n\n    /**\n     * Reloads feature flags asynchronously.\n     *\n     * Constraints:\n     *\n     * 1. Avoid parallel requests\n     * 2. Delay a few milliseconds after each reloadFeatureFlags call to batch subsequent changes together\n     * 3. Don't call this during initial load (as /decide will be called instead), see posthog-core.js\n     */\n    reloadFeatureFlags(): void {\n        if (!this.reloadFeatureFlagsQueued) {\n            this.reloadFeatureFlagsQueued = true\n            this._startReloadTimer()\n        }\n    }\n\n    setAnonymousDistinctId(anon_distinct_id: string): void {\n        this.$anon_distinct_id = anon_distinct_id\n    }\n\n    setReloadingPaused(isPaused: boolean): void {\n        this.reloadFeatureFlagsInAction = isPaused\n    }\n\n    resetRequestQueue(): void {\n        this.reloadFeatureFlagsQueued = false\n    }\n\n    _startReloadTimer(): void {\n        if (this.reloadFeatureFlagsQueued && !this.reloadFeatureFlagsInAction) {\n            setTimeout(() => {\n                if (!this.reloadFeatureFlagsInAction && this.reloadFeatureFlagsQueued) {\n                    this.reloadFeatureFlagsQueued = false\n                    this._reloadFeatureFlagsRequest()\n                }\n            }, 5)\n        }\n    }\n\n    _reloadFeatureFlagsRequest(): void {\n        if (this.instance.config.advanced_disable_feature_flags) {\n            return\n        }\n\n        this.setReloadingPaused(true)\n        const token = this.instance.config.token\n        const personProperties = this.instance.get_property(STORED_PERSON_PROPERTIES_KEY)\n        const groupProperties = this.instance.get_property(STORED_GROUP_PROPERTIES_KEY)\n        const json_data = {\n            token: token,\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n            $anon_distinct_id: this.$anon_distinct_id,\n            person_properties: personProperties,\n            group_properties: groupProperties,\n            disable_flags: this.instance.config.advanced_disable_feature_flags || undefined,\n        }\n\n        this.instance._send_request({\n            method: 'POST',\n            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),\n            data: json_data,\n            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,\n            timeout: this.instance.config.feature_flag_request_timeout_ms,\n            callback: (response) => {\n                this.setReloadingPaused(false)\n\n                let errorsLoading = true\n\n                if (response.statusCode === 200) {\n                    // successful request\n                    // reset anon_distinct_id after at least a single request with it\n                    // makes it through\n                    this.$anon_distinct_id = undefined\n                    errorsLoading = false\n                }\n                // :TRICKY: We want to fire the callback even if the request fails\n                // and return existing flags if they exist\n                // This is because we don't want to block clients waiting for flags to load.\n                // It's possible they're waiting for the callback to render the UI, but it never occurs.\n                this.receivedFeatureFlags(response.json ?? {}, errorsLoading)\n\n                // :TRICKY: Reload - start another request if queued!\n                this._startReloadTimer()\n            },\n        })\n    }\n\n    /*\n     * Get feature flag's value for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('my-flag') === 'some-variant') { // do something }\n     *\n     * @param {Object|String} key Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    getFeatureFlag(key: string, options: { send_event?: boolean } = {}): boolean | string | undefined {\n        if (!this.instance.decideEndpointWasHit && !(this.getFlags() && this.getFlags().length > 0)) {\n            logger.warn('getFeatureFlag for key \"' + key + '\" failed. Feature flags didn\\'t load in time.')\n            return undefined\n        }\n        const flagValue = this.getFlagVariants()[key]\n        const flagReportValue = `${flagValue}`\n        const flagCallReported: Record<string, string[]> = this.instance.get_property(FLAG_CALL_REPORTED) || {}\n\n        if (options.send_event || !('send_event' in options)) {\n            if (!(key in flagCallReported) || !flagCallReported[key].includes(flagReportValue)) {\n                if (isArray(flagCallReported[key])) {\n                    flagCallReported[key].push(flagReportValue)\n                } else {\n                    flagCallReported[key] = [flagReportValue]\n                }\n                this.instance.persistence?.register({ [FLAG_CALL_REPORTED]: flagCallReported })\n\n                this.instance.capture('$feature_flag_called', { $feature_flag: key, $feature_flag_response: flagValue })\n            }\n        }\n        return flagValue\n    }\n\n    getFeatureFlagPayload(key: string): JsonType {\n        const payloads = this.getFlagPayloads()\n        return payloads[key]\n    }\n\n    /*\n     * See if feature flag is enabled for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n     *\n     * @param {Object|String} key Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    isFeatureEnabled(key: string, options: { send_event?: boolean } = {}): boolean | undefined {\n        if (!this.instance.decideEndpointWasHit && !(this.getFlags() && this.getFlags().length > 0)) {\n            logger.warn('isFeatureEnabled for key \"' + key + '\" failed. Feature flags didn\\'t load in time.')\n            return undefined\n        }\n        return !!this.getFeatureFlag(key, options)\n    }\n\n    addFeatureFlagsHandler(handler: FeatureFlagsCallback): void {\n        this.featureFlagEventHandlers.push(handler)\n    }\n\n    removeFeatureFlagsHandler(handler: FeatureFlagsCallback): void {\n        this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((h) => h !== handler)\n    }\n\n    receivedFeatureFlags(response: Partial<DecideResponse>, errorsLoading?: boolean): void {\n        if (!this.instance.persistence) {\n            return\n        }\n        this.instance.decideEndpointWasHit = true\n        const currentFlags = this.getFlagVariants()\n        const currentFlagPayloads = this.getFlagPayloads()\n        parseFeatureFlagDecideResponse(response, this.instance.persistence, currentFlags, currentFlagPayloads)\n        this._fireFeatureFlagsCallbacks(errorsLoading)\n    }\n\n    /*\n     * Override feature flags on the client-side.  Useful for setting non-persistent feature flags, or for testing/debugging\n     * feature flags in the PostHog app.\n     *\n     * ### Usage:\n     *\n     *     - posthog.feature_flags.override(false)\n     *     - posthog.feature_flags.override(['beta-feature'])\n     *     - posthog.feature_flags.override({'beta-feature': 'variant', 'other-feature': true})\n     *     - posthog.feature_flags.override({'beta-feature': 'variant'}, true) // Suppress warning log\n     *\n     * @param {Object|Array|String} flags Flags to override with.\n     * @param {boolean} [suppressWarning=false] Optional parameter to suppress the override warning.\n     */\n    override(flags: boolean | string[] | Record<string, string | boolean>, suppressWarning: boolean = false): void {\n        if (!this.instance.__loaded || !this.instance.persistence) {\n            return logger.uninitializedWarning('posthog.feature_flags.override')\n        }\n\n        this._override_warning = suppressWarning\n\n        if (flags === false) {\n            this.instance.persistence.unregister(PERSISTENCE_OVERRIDE_FEATURE_FLAGS)\n        } else if (isArray(flags)) {\n            const flagsObj: Record<string, string | boolean> = {}\n            for (let i = 0; i < flags.length; i++) {\n                flagsObj[flags[i]] = true\n            }\n            this.instance.persistence.register({ [PERSISTENCE_OVERRIDE_FEATURE_FLAGS]: flagsObj })\n        } else {\n            this.instance.persistence.register({ [PERSISTENCE_OVERRIDE_FEATURE_FLAGS]: flags })\n        }\n    }\n    /*\n     * Register an event listener that runs when feature flags become available or when they change.\n     * If there are flags, the listener is called immediately in addition to being called on future changes.\n     *\n     * ### Usage:\n     *\n     *     posthog.onFeatureFlags(function(featureFlags) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once the feature flags are ready or when they are updated.\n     *                              It'll return a list of feature flags enabled for the user.\n     * @returns {Function} A function that can be called to unsubscribe the listener. Used by useEffect when the component unmounts.\n     */\n    onFeatureFlags(callback: FeatureFlagsCallback): () => void {\n        this.addFeatureFlagsHandler(callback)\n        if (this.instance.decideEndpointWasHit) {\n            const { flags, flagVariants } = this._prepareFeatureFlagsForCallbacks()\n            callback(flags, flagVariants)\n        }\n        return () => this.removeFeatureFlagsHandler(callback)\n    }\n\n    updateEarlyAccessFeatureEnrollment(key: string, isEnrolled: boolean): void {\n        const enrollmentPersonProp = {\n            [`$feature_enrollment/${key}`]: isEnrolled,\n        }\n        this.instance.capture('$feature_enrollment_update', {\n            $feature_flag: key,\n            $feature_enrollment: isEnrolled,\n            $set: enrollmentPersonProp,\n        })\n        this.setPersonPropertiesForFlags(enrollmentPersonProp, false)\n\n        const newFlags = { ...this.getFlagVariants(), [key]: isEnrolled }\n        this.instance.persistence?.register({\n            [PERSISTENCE_ACTIVE_FEATURE_FLAGS]: Object.keys(filterActiveFeatureFlags(newFlags)),\n            [ENABLED_FEATURE_FLAGS]: newFlags,\n        })\n        this._fireFeatureFlagsCallbacks()\n    }\n\n    getEarlyAccessFeatures(callback: EarlyAccessFeatureCallback, force_reload = false): void {\n        const existing_early_access_features = this.instance.get_property(PERSISTENCE_EARLY_ACCESS_FEATURES)\n\n        if (!existing_early_access_features || force_reload) {\n            this.instance._send_request({\n                transport: 'XHR',\n                url: this.instance.requestRouter.endpointFor(\n                    'api',\n                    `/api/early_access_features/?token=${this.instance.config.token}`\n                ),\n                method: 'GET',\n                callback: (response) => {\n                    if (!response.json) {\n                        return\n                    }\n                    const earlyAccessFeatures = (response.json as EarlyAccessFeatureResponse).earlyAccessFeatures\n                    this.instance.persistence?.register({ [PERSISTENCE_EARLY_ACCESS_FEATURES]: earlyAccessFeatures })\n                    return callback(earlyAccessFeatures)\n                },\n            })\n        } else {\n            return callback(existing_early_access_features)\n        }\n    }\n\n    _prepareFeatureFlagsForCallbacks(): { flags: string[]; flagVariants: Record<string, string | boolean> } {\n        const flags = this.getFlags()\n        const flagVariants = this.getFlagVariants()\n\n        // Return truthy\n        const truthyFlags = flags.filter((flag) => flagVariants[flag])\n        const truthyFlagVariants = Object.keys(flagVariants)\n            .filter((variantKey) => flagVariants[variantKey])\n            .reduce((res: Record<string, string | boolean>, key) => {\n                res[key] = flagVariants[key]\n                return res\n            }, {})\n\n        return {\n            flags: truthyFlags,\n            flagVariants: truthyFlagVariants,\n        }\n    }\n\n    _fireFeatureFlagsCallbacks(errorsLoading?: boolean): void {\n        const { flags, flagVariants } = this._prepareFeatureFlagsForCallbacks()\n        this.featureFlagEventHandlers.forEach((handler) => handler(flags, flagVariants, { errorsLoading }))\n    }\n\n    /**\n     * Set override person properties for feature flags.\n     * This is used when dealing with new persons / where you don't want to wait for ingestion\n     * to update user properties.\n     */\n    setPersonPropertiesForFlags(properties: Properties, reloadFeatureFlags = true): void {\n        // Get persisted person properties\n        const existingProperties = this.instance.get_property(STORED_PERSON_PROPERTIES_KEY) || {}\n\n        this.instance.register({\n            [STORED_PERSON_PROPERTIES_KEY]: {\n                ...existingProperties,\n                ...properties,\n            },\n        })\n\n        if (reloadFeatureFlags) {\n            this.instance.reloadFeatureFlags()\n        }\n    }\n\n    resetPersonPropertiesForFlags(): void {\n        this.instance.unregister(STORED_PERSON_PROPERTIES_KEY)\n    }\n\n    /**\n     * Set override group properties for feature flags.\n     * This is used when dealing with new groups / where you don't want to wait for ingestion\n     * to update properties.\n     * Takes in an object, the key of which is the group type.\n     * For example:\n     *     setGroupPropertiesForFlags({'organization': { name: 'CYZ', employees: '11' } })\n     */\n    setGroupPropertiesForFlags(properties: { [type: string]: Properties }, reloadFeatureFlags = true): void {\n        // Get persisted group properties\n        const existingProperties = this.instance.get_property(STORED_GROUP_PROPERTIES_KEY) || {}\n\n        if (Object.keys(existingProperties).length !== 0) {\n            Object.keys(existingProperties).forEach((groupType) => {\n                existingProperties[groupType] = {\n                    ...existingProperties[groupType],\n                    ...properties[groupType],\n                }\n                delete properties[groupType]\n            })\n        }\n\n        this.instance.register({\n            [STORED_GROUP_PROPERTIES_KEY]: {\n                ...existingProperties,\n                ...properties,\n            },\n        })\n\n        if (reloadFeatureFlags) {\n            this.instance.reloadFeatureFlags()\n        }\n    }\n\n    resetGroupPropertiesForFlags(group_type?: string): void {\n        if (group_type) {\n            const existingProperties = this.instance.get_property(STORED_GROUP_PROPERTIES_KEY) || {}\n            this.instance.register({\n                [STORED_GROUP_PROPERTIES_KEY]: { ...existingProperties, [group_type]: {} },\n            })\n        } else {\n            this.instance.unregister(STORED_GROUP_PROPERTIES_KEY)\n        }\n    }\n}\n"]}