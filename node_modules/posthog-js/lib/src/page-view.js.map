{"version":3,"file":"page-view.js","sourceRoot":"","sources":["../../src/page-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { window } from './utils/globals'\nimport { PostHog } from './posthog-core'\nimport { isUndefined } from './utils/type-utils'\n\ninterface PageViewEventProperties {\n    $prev_pageview_pathname?: string\n    $prev_pageview_duration?: number // seconds\n    $prev_pageview_last_scroll?: number\n    $prev_pageview_last_scroll_percentage?: number\n    $prev_pageview_max_scroll?: number\n    $prev_pageview_max_scroll_percentage?: number\n    $prev_pageview_last_content?: number\n    $prev_pageview_last_content_percentage?: number\n    $prev_pageview_max_content?: number\n    $prev_pageview_max_content_percentage?: number\n}\n\nexport class PageViewManager {\n    _currentPath?: string\n    _prevPageviewTimestamp?: Date\n    _instance: PostHog\n\n    constructor(instance: PostHog) {\n        this._instance = instance\n    }\n\n    doPageView(timestamp: Date): PageViewEventProperties {\n        const response = this._previousPageViewProperties(timestamp)\n\n        // On a pageview we reset the contexts\n        this._currentPath = window?.location.pathname ?? ''\n        this._instance.scrollManager.resetContext()\n        this._prevPageviewTimestamp = timestamp\n\n        return response\n    }\n\n    doPageLeave(timestamp: Date): PageViewEventProperties {\n        return this._previousPageViewProperties(timestamp)\n    }\n\n    private _previousPageViewProperties(timestamp: Date): PageViewEventProperties {\n        const previousPath = this._currentPath\n        const previousTimestamp = this._prevPageviewTimestamp\n        const scrollContext = this._instance.scrollManager.getContext()\n\n        if (!previousTimestamp) {\n            // this means there was no previous pageview\n            return {}\n        }\n\n        let properties: PageViewEventProperties = {}\n        if (scrollContext) {\n            let { maxScrollHeight, lastScrollY, maxScrollY, maxContentHeight, lastContentY, maxContentY } =\n                scrollContext\n\n            if (\n                !isUndefined(maxScrollHeight) &&\n                !isUndefined(lastScrollY) &&\n                !isUndefined(maxScrollY) &&\n                !isUndefined(maxContentHeight) &&\n                !isUndefined(lastContentY) &&\n                !isUndefined(maxContentY)\n            ) {\n                // Use ceil, so that e.g. scrolling 999.5px of a 1000px page is considered 100% scrolled\n                maxScrollHeight = Math.ceil(maxScrollHeight)\n                lastScrollY = Math.ceil(lastScrollY)\n                maxScrollY = Math.ceil(maxScrollY)\n                maxContentHeight = Math.ceil(maxContentHeight)\n                lastContentY = Math.ceil(lastContentY)\n                maxContentY = Math.ceil(maxContentY)\n\n                // if the maximum scroll height is near 0, then the percentage is 1\n                const lastScrollPercentage = maxScrollHeight <= 1 ? 1 : clamp(lastScrollY / maxScrollHeight, 0, 1)\n                const maxScrollPercentage = maxScrollHeight <= 1 ? 1 : clamp(maxScrollY / maxScrollHeight, 0, 1)\n                const lastContentPercentage = maxContentHeight <= 1 ? 1 : clamp(lastContentY / maxContentHeight, 0, 1)\n                const maxContentPercentage = maxContentHeight <= 1 ? 1 : clamp(maxContentY / maxContentHeight, 0, 1)\n\n                properties = {\n                    $prev_pageview_last_scroll: lastScrollY,\n                    $prev_pageview_last_scroll_percentage: lastScrollPercentage,\n                    $prev_pageview_max_scroll: maxScrollY,\n                    $prev_pageview_max_scroll_percentage: maxScrollPercentage,\n                    $prev_pageview_last_content: lastContentY,\n                    $prev_pageview_last_content_percentage: lastContentPercentage,\n                    $prev_pageview_max_content: maxContentY,\n                    $prev_pageview_max_content_percentage: maxContentPercentage,\n                }\n            }\n        }\n\n        if (previousPath) {\n            properties.$prev_pageview_pathname = previousPath\n        }\n        if (previousTimestamp) {\n            // Use seconds, for consistency with our other duration-related properties like $duration\n            properties.$prev_pageview_duration = (timestamp.getTime() - previousTimestamp.getTime()) / 1000\n        }\n\n        return properties\n    }\n}\n\nfunction clamp(x: number, min: number, max: number) {\n    return Math.max(min, Math.min(x, max))\n}\n"]}