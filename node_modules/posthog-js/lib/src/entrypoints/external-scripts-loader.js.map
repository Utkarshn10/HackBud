{"version":3,"file":"external-scripts-loader.js","sourceRoot":"","sources":["../../../src/entrypoints/external-scripts-loader.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PostHog } from '../posthog-core'\nimport { assignableWindow, document, PostHogExtensionKind } from '../utils/globals'\nimport { logger } from '../utils/logger'\n\nconst loadScript = (posthog: PostHog, url: string, callback: (error?: string | Event, event?: Event) => void) => {\n    if (posthog.config.disable_external_dependency_loading) {\n        logger.warn(`${url} was requested but loading of external scripts is disabled.`)\n        return callback('Loading of external scripts is disabled')\n    }\n\n    const addScript = () => {\n        if (!document) {\n            return callback('document not found')\n        }\n        const scriptTag = document.createElement('script')\n        scriptTag.type = 'text/javascript'\n        scriptTag.src = url\n        scriptTag.onload = (event) => callback(undefined, event)\n        scriptTag.onerror = (error) => callback(error)\n\n        const scripts = document.querySelectorAll('body > script')\n        if (scripts.length > 0) {\n            scripts[0].parentNode?.insertBefore(scriptTag, scripts[0])\n        } else {\n            // In exceptional situations this call might load before the DOM is fully ready.\n            document.body.appendChild(scriptTag)\n        }\n    }\n\n    if (document?.body) {\n        addScript()\n    } else {\n        document?.addEventListener('DOMContentLoaded', addScript)\n    }\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.loadExternalDependency = (\n    posthog: PostHog,\n    kind: PostHogExtensionKind,\n    callback: (error?: string | Event, event?: Event) => void\n): void => {\n    let scriptUrlToLoad = `/static/${kind}.js` + `?v=${posthog.version}`\n\n    if (kind === 'toolbar') {\n        // toolbar.js is served from the PostHog CDN, this has a TTL of 24 hours.\n        // the toolbar asset includes a rotating \"token\" that is valid for 5 minutes.\n        const fiveMinutesInMillis = 5 * 60 * 1000\n        // this ensures that we bust the cache periodically\n        const timestampToNearestFiveMinutes = Math.floor(Date.now() / fiveMinutesInMillis) * fiveMinutesInMillis\n\n        scriptUrlToLoad = `${scriptUrlToLoad}?&=${timestampToNearestFiveMinutes}`\n    }\n    const url = posthog.requestRouter.endpointFor('assets', scriptUrlToLoad)\n\n    loadScript(posthog, url, callback)\n}\n\nassignableWindow.__PosthogExtensions__.loadSiteApp = (\n    posthog: PostHog,\n    url: string,\n    callback: (error?: string | Event, event?: Event) => void\n): void => {\n    const scriptUrl = posthog.requestRouter.endpointFor('api', url)\n\n    loadScript(posthog, scriptUrl, callback)\n}\n"]}