{"version":3,"file":"tracing-headers.js","sourceRoot":"","sources":["../../../src/entrypoints/tracing-headers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,EAAE,KAAK,EAAE,MAAM,0CAA0C,CAAA;AAChE,OAAO,EAAE,gBAAgB,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAE3D,IAAM,iBAAiB,GAAG,UAAC,cAAgC,EAAE,GAAY;IAC/D,IAAA,KAA0B,cAAc,CAAC,6BAA6B,CAAC,IAAI,CAAC,EAA1E,SAAS,eAAA,EAAE,QAAQ,cAAuD,CAAA;IAClF,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAA;IAClD,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAA;AACpD,CAAC,CAAA;AAED,IAAM,UAAU,GAAG,UAAC,cAAgC;IAChD,6DAA6D;IAC7D,aAAa;IACb,OAAO,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,UAAC,aAA2B;QACtD,OAAO,UAAgB,GAAsB,EAAE,IAA8B;;;;oBAGnE,GAAG,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;oBAElC,iBAAiB,CAAC,cAAc,EAAE,GAAG,CAAC,CAAA;oBAEtC,sBAAO,aAAa,CAAC,GAAG,CAAC,EAAA;;;SAC5B,CAAA;IACL,CAAC,CAAC,CAAA;AACN,CAAC,CAAA;AAED,IAAM,QAAQ,GAAG,UAAC,cAAgC;IAC9C,OAAO,KAAK;IACR,iEAAiE;IACjE,MAAO,CAAC,cAAc,CAAC,SAAS,EAChC,MAAM;IACN,6DAA6D;IAC7D,aAAa;IACb,UAAC,YAAkD;QAC/C,OAAO,UACH,MAAc,EACd,GAAiB,EACjB,KAAY,EACZ,QAAwB,EACxB,QAAwB;YAFxB,sBAAA,EAAA,YAAY;YAIZ,wFAAwF;YACxF,6DAA6D;YAC7D,aAAa;YACb,IAAM,GAAG,GAAG,IAAsB,CAAA;YAElC,uEAAuE;YACvE,yCAAyC;YACzC,IAAM,GAAG,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,CAAA;YAE5B,iBAAiB,CAAC,cAAc,EAAE,GAAG,CAAC,CAAA;YAEtC,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAC7E,CAAC,CAAA;IACL,CAAC,CACJ,CAAA;AACL,CAAC,CAAA;AAED,gBAAgB,CAAC,qBAAqB,GAAG,gBAAgB,CAAC,qBAAqB,IAAI,EAAE,CAAA;AACrF,IAAM,QAAQ,GAAG;IACb,WAAW,EAAE,UAAU;IACvB,SAAS,EAAE,QAAQ;CACtB,CAAA;AACD,gBAAgB,CAAC,qBAAqB,CAAC,sBAAsB,GAAG,QAAQ,CAAA;AAExE,8FAA8F;AAC9F,kGAAkG;AAClG,QAAQ;AACR,2CAA2C;AAC3C,2EAA2E;AAC3E,gBAAgB,CAAC,6BAA6B,GAAG,QAAQ,CAAA;AAEzD,eAAe,QAAQ,CAAA","sourcesContent":["import { SessionIdManager } from '../sessionid'\nimport { patch } from '../extensions/replay/rrweb-plugins/patch'\nimport { assignableWindow, window } from '../utils/globals'\n\nconst addTracingHeaders = (sessionManager: SessionIdManager, req: Request) => {\n    const { sessionId, windowId } = sessionManager.checkAndGetSessionAndWindowId(true)\n    req.headers.set('X-POSTHOG-SESSION-ID', sessionId)\n    req.headers.set('X-POSTHOG-WINDOW-ID', windowId)\n}\n\nconst patchFetch = (sessionManager: SessionIdManager): (() => void) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return patch(window, 'fetch', (originalFetch: typeof fetch) => {\n        return async function (url: URL | RequestInfo, init?: RequestInit | undefined) {\n            // check IE earlier than this, we only initialize if Request is present\n            // eslint-disable-next-line compat/compat\n            const req = new Request(url, init)\n\n            addTracingHeaders(sessionManager, req)\n\n            return originalFetch(req)\n        }\n    })\n}\n\nconst patchXHR = (sessionManager: SessionIdManager): (() => void) => {\n    return patch(\n        // we can assert this is present because we've checked previously\n        window!.XMLHttpRequest.prototype,\n        'open',\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (originalOpen: typeof XMLHttpRequest.prototype.open) => {\n            return function (\n                method: string,\n                url: string | URL,\n                async = true,\n                username?: string | null,\n                password?: string | null\n            ) {\n                // because this function is returned in its actual context `this` _is_ an XMLHttpRequest\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                const xhr = this as XMLHttpRequest\n\n                // check IE earlier than this, we only initialize if Request is present\n                // eslint-disable-next-line compat/compat\n                const req = new Request(url)\n\n                addTracingHeaders(sessionManager, req)\n\n                return originalOpen.call(xhr, method, req.url, async, username, password)\n            }\n        }\n    )\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nconst patchFns = {\n    _patchFetch: patchFetch,\n    _patchXHR: patchXHR,\n}\nassignableWindow.__PosthogExtensions__.tracingHeadersPatchFns = patchFns\n\n// we used to put tracingHeadersPatchFns on window, and now we put it on __PosthogExtensions__\n// but that means that old clients which lazily load this extension are looking in the wrong place\n// yuck,\n// so we also put it directly on the window\n// when 1.161.1 is the oldest version seen in production we can remove this\nassignableWindow.postHogTracingHeadersPatchFns = patchFns\n\nexport default patchFns\n"]}