{"version":3,"file":"error-conversion.js","sourceRoot":"","sources":["../../../../src/extensions/exception-autocapture/error-conversion.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    isDOMError,\n    isDOMException,\n    isError,\n    isErrorEvent,\n    isErrorWithStack,\n    isEvent,\n    isPlainObject,\n    isPrimitive,\n} from './type-checking'\nimport { defaultStackParser, StackFrame } from './stack-trace'\n\nimport { isEmptyString, isString, isUndefined } from '../../utils/type-utils'\nimport { ErrorEventArgs, ErrorMetadata, SeverityLevel, severityLevels } from '../../types'\n\nexport interface ErrorProperties {\n    $exception_list: Exception[]\n    $exception_level?: SeverityLevel\n    $exception_DOMException_code?: string\n    $exception_personURL?: string\n}\n\nexport interface Exception {\n    type?: string\n    value?: string\n    mechanism?: {\n        /**\n         * In theory, whether or not the exception has been handled by the user. In practice, whether or not we see it before\n         * it hits the global error/rejection handlers, whether through explicit handling by the user or auto instrumentation.\n         */\n        handled?: boolean\n        type?: string\n        source?: string\n        /**\n         * True when `captureException` is called with anything other than an instance of `Error` (or, in the case of browser,\n         * an instance of `ErrorEvent`, `DOMError`, or `DOMException`). causing us to create a synthetic error in an attempt\n         * to recreate the stacktrace.\n         */\n        synthetic?: boolean\n    }\n    module?: string\n    thread_id?: number\n    stacktrace?: {\n        frames?: StackFrame[]\n    }\n}\n\nexport interface ErrorConversions {\n    errorToProperties: (args: ErrorEventArgs, metadata?: ErrorMetadata) => ErrorProperties\n    unhandledRejectionToProperties: (args: [ev: PromiseRejectionEvent]) => ErrorProperties\n}\n/**\n * based on the very wonderful MIT licensed Sentry SDK\n */\n\nconst ERROR_TYPES_PATTERN =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i\n\nexport function parseStackFrames(ex: Error & { stacktrace?: string }, framesToPop: number = 0): StackFrame[] {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    const stacktrace = ex.stacktrace || ex.stack || ''\n\n    const skipLines = getSkipFirstStackStringLines(ex)\n\n    try {\n        const frames = defaultStackParser(stacktrace, skipLines)\n        // frames are reversed so we remove the from the back of the array\n        return frames.slice(0, frames.length - framesToPop)\n    } catch {\n        // no-empty\n    }\n\n    return []\n}\n\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i\n\n/**\n * Certain known React errors contain links that would be falsely\n * parsed as frames. This function check for these errors and\n * returns number of the stack string lines to skip.\n */\nfunction getSkipFirstStackStringLines(ex: Error): number {\n    if (ex && reactMinifiedRegexp.test(ex.message)) {\n        return 1\n    }\n\n    return 0\n}\n\nfunction errorPropertiesFromError(error: Error, metadata?: ErrorMetadata): ErrorProperties {\n    const frames = parseStackFrames(error)\n\n    const handled = metadata?.handled ?? true\n    const synthetic = metadata?.synthetic ?? false\n\n    const exceptionType = metadata?.overrideExceptionType ? metadata.overrideExceptionType : error.name\n    const exceptionMessage = metadata?.overrideExceptionMessage\n        ? metadata.overrideExceptionMessage\n        : extractMessage(error)\n\n    return {\n        $exception_list: [\n            {\n                type: exceptionType,\n                value: exceptionMessage,\n                stacktrace: {\n                    frames,\n                },\n                mechanism: {\n                    handled,\n                    synthetic,\n                },\n            },\n        ],\n        $exception_level: 'error',\n    }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nexport function extractMessage(err: Error & { message: { error?: Error } }): string {\n    const message = err.message\n\n    if (message.error && typeof message.error.message === 'string') {\n        return message.error.message\n    }\n\n    return message\n}\n\nfunction errorPropertiesFromString(candidate: string, metadata?: ErrorMetadata): ErrorProperties {\n    // Defaults for metadata are based on what the error candidate is.\n    const handled = metadata?.handled ?? true\n    const synthetic = metadata?.synthetic ?? true\n\n    const exceptionType = metadata?.overrideExceptionType\n        ? metadata.overrideExceptionType\n        : metadata?.defaultExceptionType ?? 'Error'\n    const exceptionMessage = metadata?.overrideExceptionMessage\n        ? metadata.overrideExceptionMessage\n        : candidate\n        ? candidate\n        : metadata?.defaultExceptionMessage\n\n    const exception: Exception = {\n        type: exceptionType,\n        value: exceptionMessage,\n        mechanism: {\n            handled,\n            synthetic,\n        },\n    }\n\n    if (metadata?.syntheticException) {\n        // Kludge: strip the last frame from a synthetically created error\n        // so that it does not appear in a users stack trace\n        const frames = parseStackFrames(metadata.syntheticException, 1)\n        if (frames.length) {\n            exception.stacktrace = { frames }\n        }\n    }\n\n    return {\n        $exception_list: [exception],\n        $exception_level: 'error',\n    }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength = 40): string {\n    const keys = Object.keys(exception)\n    keys.sort()\n\n    if (!keys.length) {\n        return '[object has no keys]'\n    }\n\n    for (let i = keys.length; i > 0; i--) {\n        const serialized = keys.slice(0, i).join(', ')\n        if (serialized.length > maxLength) {\n            continue\n        }\n        if (i === keys.length) {\n            return serialized\n        }\n        return serialized.length <= maxLength ? serialized : `${serialized.slice(0, maxLength)}...`\n    }\n\n    return ''\n}\n\nfunction isSeverityLevel(x: unknown): x is SeverityLevel {\n    return isString(x) && !isEmptyString(x) && severityLevels.indexOf(x as SeverityLevel) >= 0\n}\n\nfunction errorPropertiesFromObject(candidate: Record<string, unknown>, metadata?: ErrorMetadata): ErrorProperties {\n    // Defaults for metadata are based on what the error candidate is.\n    const handled = metadata?.handled ?? true\n    const synthetic = metadata?.synthetic ?? true\n\n    const exceptionType = metadata?.overrideExceptionType\n        ? metadata.overrideExceptionType\n        : isEvent(candidate)\n        ? candidate.constructor.name\n        : 'Error'\n    const exceptionMessage = metadata?.overrideExceptionMessage\n        ? metadata.overrideExceptionMessage\n        : `Non-Error ${'exception'} captured with keys: ${extractExceptionKeysForMessage(candidate)}`\n\n    const exception: Exception = {\n        type: exceptionType,\n        value: exceptionMessage,\n        mechanism: {\n            handled,\n            synthetic,\n        },\n    }\n\n    if (metadata?.syntheticException) {\n        // Kludge: strip the last frame from a synthetically created error\n        // so that it does not appear in a users stack trace\n        const frames = parseStackFrames(metadata?.syntheticException, 1)\n        if (frames.length) {\n            exception.stacktrace = { frames }\n        }\n    }\n\n    return {\n        $exception_list: [exception],\n        $exception_level: isSeverityLevel(candidate.level) ? candidate.level : 'error',\n    }\n}\n\nexport function errorToProperties(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    [event, _, __, ___, error]: ErrorEventArgs,\n    metadata?: ErrorMetadata\n): ErrorProperties {\n    let errorProperties: ErrorProperties = { $exception_list: [] }\n\n    const candidate = error || event\n\n    if (isDOMError(candidate) || isDOMException(candidate)) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n\n        const domException = candidate as unknown as DOMException\n\n        if (isErrorWithStack(candidate)) {\n            errorProperties = errorPropertiesFromError(candidate as Error, metadata)\n        } else {\n            const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException')\n            const message = domException.message ? `${name}: ${domException.message}` : name\n            const exceptionType = isDOMError(domException) ? 'DOMError' : 'DOMException'\n            errorProperties = errorPropertiesFromString(message, {\n                ...metadata,\n                overrideExceptionType: exceptionType,\n                defaultExceptionMessage: message,\n            })\n        }\n        if ('code' in domException) {\n            errorProperties['$exception_DOMException_code'] = `${domException.code}`\n        }\n        return errorProperties\n    } else if (isErrorEvent(candidate as ErrorEvent) && (candidate as ErrorEvent).error) {\n        return errorPropertiesFromError((candidate as ErrorEvent).error as Error, metadata)\n    } else if (isError(candidate)) {\n        return errorPropertiesFromError(candidate, metadata)\n    } else if (isPlainObject(candidate) || isEvent(candidate)) {\n        // group these by using the keys available on the object\n        const objectException = candidate as Record<string, unknown>\n        return errorPropertiesFromObject(objectException, metadata)\n    } else if (isUndefined(error) && isString(event)) {\n        let name = 'Error'\n        let message = event\n        const groups = event.match(ERROR_TYPES_PATTERN)\n        if (groups) {\n            name = groups[1]\n            message = groups[2]\n        }\n\n        return errorPropertiesFromString(message, {\n            ...metadata,\n            overrideExceptionType: name,\n            defaultExceptionMessage: message,\n        })\n    } else {\n        return errorPropertiesFromString(candidate as string, metadata)\n    }\n}\n\nexport function unhandledRejectionToProperties([ev]: [ev: PromiseRejectionEvent]): ErrorProperties {\n    const error = getUnhandledRejectionError(ev)\n\n    if (isPrimitive(error)) {\n        return errorPropertiesFromString(`Non-Error promise rejection captured with value: ${String(error)}`, {\n            handled: false,\n            synthetic: false,\n            overrideExceptionType: 'UnhandledRejection',\n        })\n    }\n\n    return errorToProperties([error as string | Event], {\n        handled: false,\n        overrideExceptionType: 'UnhandledRejection',\n        defaultExceptionMessage: String(error),\n    })\n}\n\nfunction getUnhandledRejectionError(error: unknown): unknown {\n    if (isPrimitive(error)) {\n        return error\n    }\n\n    // dig the object of the rejection out of known event types\n    try {\n        type ErrorWithReason = { reason: unknown }\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in (error as ErrorWithReason)) {\n            return (error as ErrorWithReason).reason\n        }\n\n        type CustomEventWithDetail = { detail: { reason: unknown } }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        if ('detail' in (error as CustomEventWithDetail) && 'reason' in (error as CustomEventWithDetail).detail) {\n            return (error as CustomEventWithDetail).detail.reason\n        }\n    } catch {\n        // no-empty\n    }\n\n    return error\n}\n"]}