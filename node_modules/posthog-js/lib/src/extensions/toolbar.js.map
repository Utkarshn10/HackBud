{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../src/extensions/toolbar.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerEvent, trySafe } from '../utils'\nimport { PostHog } from '../posthog-core'\nimport { ToolbarParams } from '../types'\nimport { _getHashParam } from '../utils/request-utils'\nimport { logger } from '../utils/logger'\nimport { window, document, assignableWindow } from '../utils/globals'\nimport { TOOLBAR_ID } from '../constants'\n\n// TRICKY: Many web frameworks will modify the route on load, potentially before posthog is initialized.\n// To get ahead of this we grab it as soon as the posthog-js is parsed\nconst STATE_FROM_WINDOW = window?.location\n    ? _getHashParam(window.location.hash, '__posthog') || _getHashParam(location.hash, 'state')\n    : null\n\nconst LOCALSTORAGE_KEY = '_postHogToolbarParams'\n\nenum ToolbarState {\n    UNINITIALIZED = 0,\n    LOADING = 1,\n    LOADED = 2,\n}\n\nexport class Toolbar {\n    instance: PostHog\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n    }\n\n    // NOTE: We store the state of the toolbar in the global scope to avoid multiple instances of the SDK loading the toolbar\n    private setToolbarState(state: ToolbarState) {\n        assignableWindow['ph_toolbar_state'] = state\n    }\n\n    private getToolbarState(): ToolbarState {\n        return assignableWindow['ph_toolbar_state'] ?? ToolbarState.UNINITIALIZED\n    }\n\n    /**\n     * To load the toolbar, we need an access token and other state. That state comes from one of three places:\n     * 1. In the URL hash params\n     * 2. From session storage under the key `toolbarParams` if the toolbar was initialized on a previous page\n     */\n    maybeLoadToolbar(\n        location: Location | undefined = undefined,\n        localStorage: Storage | undefined = undefined,\n        history: History | undefined = undefined\n    ): boolean {\n        if (!window || !document) {\n            return false\n        }\n        location = location ?? window.location\n        history = history ?? window.history\n\n        try {\n            // Before running the code we check if we can access localStorage, if not we opt-out\n            if (!localStorage) {\n                try {\n                    window.localStorage.setItem('test', 'test')\n                    window.localStorage.removeItem('test')\n                } catch {\n                    return false\n                }\n\n                // If localStorage was undefined, and localStorage is supported we set the default value\n                localStorage = window?.localStorage\n            }\n\n            /**\n             * Info about the state\n             * The state is a json object\n             * 1. (Legacy) The state can be `state={}` as a urlencoded object of info. In this case\n             * 2. The state should now be found in `__posthog={}` and can be base64 encoded or urlencoded.\n             * 3. Base64 encoding is preferred and will gradually be rolled out everywhere\n             */\n\n            const stateHash =\n                STATE_FROM_WINDOW || _getHashParam(location.hash, '__posthog') || _getHashParam(location.hash, 'state')\n\n            let toolbarParams: ToolbarParams\n            const state = stateHash\n                ? trySafe(() => JSON.parse(atob(decodeURIComponent(stateHash)))) ||\n                  trySafe(() => JSON.parse(decodeURIComponent(stateHash)))\n                : null\n\n            const parseFromUrl = state && state['action'] === 'ph_authorize'\n\n            if (parseFromUrl) {\n                // happens if they are initializing the toolbar using an old snippet\n                toolbarParams = state\n                toolbarParams.source = 'url'\n\n                if (toolbarParams && Object.keys(toolbarParams).length > 0) {\n                    if (state['desiredHash']) {\n                        // hash that was in the url before the redirect\n                        location.hash = state['desiredHash']\n                    } else if (history) {\n                        // second param is unused see https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n                        history.replaceState(history.state, '', location.pathname + location.search) // completely remove hash\n                    } else {\n                        location.hash = '' // clear hash (but leaves # unfortunately)\n                    }\n                }\n            } else {\n                // get credentials from localStorage from a previous initialization\n\n                toolbarParams = JSON.parse(localStorage.getItem(LOCALSTORAGE_KEY) || '{}')\n                toolbarParams.source = 'localstorage'\n\n                // delete \"add-action\" or other intent from toolbarParams, otherwise we'll have the same intent\n                // every time we open the page (e.g. you just visiting your own site an hour later)\n                delete toolbarParams.userIntent\n            }\n\n            if (toolbarParams['token'] && this.instance.config.token === toolbarParams['token']) {\n                this.loadToolbar(toolbarParams)\n                return true\n            } else {\n                return false\n            }\n        } catch {\n            return false\n        }\n    }\n\n    private _callLoadToolbar(params: ToolbarParams) {\n        ;(assignableWindow['ph_load_toolbar'] || assignableWindow['ph_load_editor'])(params, this.instance)\n    }\n\n    loadToolbar(params?: ToolbarParams): boolean {\n        const toolbarRunning = !!document?.getElementById(TOOLBAR_ID)\n\n        if (!window || toolbarRunning) {\n            // The toolbar will clear the localStorage key when it's done with it. If it is present that indicates the toolbar is already open and running\n            return false\n        }\n\n        const disableToolbarMetrics =\n            this.instance.requestRouter.region === 'custom' && this.instance.config.advanced_disable_toolbar_metrics\n\n        const toolbarParams = {\n            token: this.instance.config.token,\n            ...params,\n            apiURL: this.instance.requestRouter.endpointFor('ui'),\n            ...(disableToolbarMetrics ? { instrument: false } : {}),\n        }\n        window.localStorage.setItem(\n            LOCALSTORAGE_KEY,\n            JSON.stringify({\n                ...toolbarParams,\n                source: undefined,\n            })\n        )\n\n        if (this.getToolbarState() === ToolbarState.LOADED) {\n            this._callLoadToolbar(toolbarParams)\n        } else if (this.getToolbarState() === ToolbarState.UNINITIALIZED) {\n            // only load the toolbar once, even if there are multiple instances of PostHogLib\n            this.setToolbarState(ToolbarState.LOADING)\n\n            assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(this.instance, 'toolbar', (err) => {\n                if (err) {\n                    logger.error('Failed to load toolbar', err)\n                    this.setToolbarState(ToolbarState.UNINITIALIZED)\n                    return\n                }\n                this.setToolbarState(ToolbarState.LOADED)\n                this._callLoadToolbar(toolbarParams)\n            })\n\n            // Turbolinks doesn't fire an onload event but does replace the entire body, including the toolbar.\n            // Thus, we ensure the toolbar is only loaded inside the body, and then reloaded on turbolinks:load.\n            registerEvent(window, 'turbolinks:load', () => {\n                this.setToolbarState(ToolbarState.UNINITIALIZED)\n                this.loadToolbar(toolbarParams)\n            })\n        }\n\n        return true\n    }\n\n    /** @deprecated Use \"loadToolbar\" instead. */\n    _loadEditor(params: ToolbarParams): boolean {\n        return this.loadToolbar(params)\n    }\n\n    /** @deprecated Use \"maybeLoadToolbar\" instead. */\n    maybeLoadEditor(\n        location: Location | undefined = undefined,\n        localStorage: Storage | undefined = undefined,\n        history: History | undefined = undefined\n    ): boolean {\n        return this.maybeLoadToolbar(location, localStorage, history)\n    }\n}\n"]}