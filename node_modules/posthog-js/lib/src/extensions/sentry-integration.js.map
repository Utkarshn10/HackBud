{"version":3,"file":"sentry-integration.js","sourceRoot":"","sources":["../../../src/extensions/sentry-integration.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Integrate Sentry with PostHog. This will add a direct link to the person in Sentry, and an $exception event in PostHog\n *\n * ### Usage\n *\n *     Sentry.init({\n *          dsn: 'https://example',\n *          integrations: [\n *              new posthog.SentryIntegration(posthog)\n *          ]\n *     })\n *\n * @param {Object} [posthog] The posthog object\n * @param {string} [organization] Optional: The Sentry organization, used to send a direct link from PostHog to Sentry\n * @param {Number} [projectId] Optional: The Sentry project id, used to send a direct link from PostHog to Sentry\n * @param {string} [prefix] Optional: Url of a self-hosted sentry instance (default: https://sentry.io/organizations/)\n */\n\nimport { PostHog } from '../posthog-core'\nimport { SeverityLevel } from '../types'\n\n// NOTE - we can't import from @sentry/types because it changes frequently and causes clashes\n// We only use a small subset of the types, so we can just define the integration overall and use any for the rest\n\n// import {\n//     Event as _SentryEvent,\n//     EventProcessor as _SentryEventProcessor,\n//     Hub as _SentryHub,\n//     Integration as _SentryIntegration,\n//     SeverityLevel as _SeverityLevel,\n//     IntegrationClass as _SentryIntegrationClass,\n// } from '@sentry/types'\n\n// Uncomment the above and comment the below to get type checking for development\n\ntype _SentryEvent = any\ntype _SentryEventProcessor = any\ntype _SentryHub = any\n\ninterface _SentryIntegrationClass {\n    name: string\n    setupOnce(addGlobalEventProcessor: (callback: _SentryEventProcessor) => void, getCurrentHub: () => _SentryHub): void\n}\n\ninterface _SentryIntegration {\n    name: string\n    processEvent(event: _SentryEvent): _SentryEvent\n}\n\ninterface SentryExceptionProperties {\n    $sentry_event_id: any\n    $sentry_exception: any\n    $sentry_exception_message: any\n    $sentry_exception_type: any\n    $sentry_tags: any\n    $sentry_url?: string\n}\n\nexport type SentryIntegrationOptions = {\n    organization?: string\n    projectId?: number\n    prefix?: string\n    /**\n     * By default, only errors are sent to PostHog. You can set this to '*' to send all events.\n     * Or to an error of SeverityLevel to only send events matching the provided levels.\n     * e.g. ['error', 'fatal'] to send only errors and fatals\n     * e.g. ['error'] to send only errors -- the default when omitted\n     * e.g. '*' to send all events\n     */\n    severityAllowList?: SeverityLevel[] | '*'\n}\n\nconst NAME = 'posthog-js'\n\nexport function createEventProcessor(\n    _posthog: PostHog,\n    { organization, projectId, prefix, severityAllowList = ['error'] }: SentryIntegrationOptions = {}\n): (event: _SentryEvent) => _SentryEvent {\n    return (event) => {\n        const shouldProcessLevel = severityAllowList === '*' || severityAllowList.includes(event.level as SeverityLevel)\n        if (!shouldProcessLevel || !_posthog.__loaded) return event\n        if (!event.tags) event.tags = {}\n\n        const personUrl = _posthog.requestRouter.endpointFor(\n            'ui',\n            `/project/${_posthog.config.token}/person/${_posthog.get_distinct_id()}`\n        )\n        event.tags['PostHog Person URL'] = personUrl\n        if (_posthog.sessionRecordingStarted()) {\n            event.tags['PostHog Recording URL'] = _posthog.get_session_replay_url({ withTimestamp: true })\n        }\n\n        const exceptions = event.exception?.values || []\n\n        const data: SentryExceptionProperties & {\n            // two properties added to match any exception auto-capture\n            // added manually to avoid any dependency on the lazily loaded content\n            $exception_message: any\n            $exception_type: any\n            $exception_list: any\n            $exception_personURL: string\n            $exception_level: SeverityLevel\n            $level: SeverityLevel\n        } = {\n            // PostHog Exception Properties,\n            $exception_message: exceptions[0]?.value || event.message,\n            $exception_type: exceptions[0]?.type,\n            $exception_personURL: personUrl,\n            $exception_level: event.level,\n            $exception_list: exceptions,\n            // Sentry Exception Properties\n            $sentry_event_id: event.event_id,\n            $sentry_exception: event.exception,\n            $sentry_exception_message: exceptions[0]?.value || event.message,\n            $sentry_exception_type: exceptions[0]?.type,\n            $sentry_tags: event.tags,\n            $level: event.level,\n        }\n\n        if (organization && projectId) {\n            data['$sentry_url'] =\n                (prefix || 'https://sentry.io/organizations/') +\n                organization +\n                '/issues/?project=' +\n                projectId +\n                '&query=' +\n                event.event_id\n        }\n\n        _posthog.exceptions.sendExceptionEvent(data)\n\n        return event\n    }\n}\n\n// V8 integration - function based\nexport function sentryIntegration(_posthog: PostHog, options?: SentryIntegrationOptions): _SentryIntegration {\n    const processor = createEventProcessor(_posthog, options)\n    return {\n        name: NAME,\n        processEvent(event) {\n            return processor(event)\n        },\n    }\n}\n// V7 integration - class based\nexport class SentryIntegration implements _SentryIntegrationClass {\n    name: string\n\n    setupOnce: (\n        addGlobalEventProcessor: (callback: _SentryEventProcessor) => void,\n        getCurrentHub: () => _SentryHub\n    ) => void\n\n    constructor(\n        _posthog: PostHog,\n        organization?: string,\n        projectId?: number,\n        prefix?: string,\n        /**\n         * By default, only errors are sent to PostHog. You can set this to '*' to send all events.\n         * Or to an error of SeverityLevel to only send events matching the provided levels.\n         * e.g. ['error', 'fatal'] to send only errors and fatals\n         * e.g. ['error'] to send only errors -- the default when omitted\n         * e.g. '*' to send all events\n         */\n        severityAllowList?: SeverityLevel[] | '*'\n    ) {\n        // setupOnce gets called by Sentry when it intializes the plugin\n        this.name = NAME\n        this.setupOnce = function (addGlobalEventProcessor: (callback: _SentryEventProcessor) => void) {\n            addGlobalEventProcessor(\n                createEventProcessor(_posthog, { organization, projectId, prefix, severityAllowList })\n            )\n        }\n    }\n}\n"]}