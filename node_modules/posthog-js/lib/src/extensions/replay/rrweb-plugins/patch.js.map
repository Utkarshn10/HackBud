{"version":3,"file":"patch.js","sourceRoot":"","sources":["../../../../../src/extensions/replay/rrweb-plugins/patch.ts"],"names":[],"mappings":"AAAA,8CAA8C;AAC9C,+HAA+H;AAC/H,kJAAkJ;AAClJ,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAA;AAEtD,MAAM,UAAU,KAAK,CACjB,MAA8B,EAC9B,IAAY,EACZ,WAA4C;IAE5C,IAAI,CAAC;QACD,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,EAAE,CAAC;YACpB,OAAO;gBACH,EAAE;YACN,CAAC,CAAA;QACL,CAAC;QAED,IAAM,UAAQ,GAAG,MAAM,CAAC,IAAI,CAAkB,CAAA;QAC9C,IAAM,OAAO,GAAG,WAAW,CAAC,UAAQ,CAAC,CAAA;QAErC,0GAA0G;QAC1G,kFAAkF;QAClF,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YACtB,mEAAmE;YACnE,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,EAAE,CAAA;YAC3C,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE;gBAC7B,mBAAmB,EAAE;oBACjB,UAAU,EAAE,KAAK;oBACjB,KAAK,EAAE,IAAI;iBACd;aACJ,CAAC,CAAA;QACN,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAA;QAEtB,OAAO;YACH,MAAM,CAAC,IAAI,CAAC,GAAG,UAAQ,CAAA;QAC3B,CAAC,CAAA;IACL,CAAC;IAAC,WAAM,CAAC;QACL,OAAO;YACH,EAAE;QACN,CAAC,CAAA;QACD,iFAAiF;QACjF,mEAAmE;IACvE,CAAC;AACL,CAAC","sourcesContent":["// import { patch } from 'rrweb/typings/utils'\n// copied from https://github.com/rrweb-io/rrweb/blob/8aea5b00a4dfe5a6f59bd2ae72bb624f45e51e81/packages/rrweb/src/utils.ts#L129\n// which was copied from https://github.com/getsentry/sentry-javascript/blob/b2109071975af8bf0316d3b5b38f519bdaf5dc15/packages/utils/src/object.ts\nimport { isFunction } from '../../../utils/type-utils'\n\nexport function patch(\n    source: { [key: string]: any },\n    name: string,\n    replacement: (...args: unknown[]) => unknown\n): () => void {\n    try {\n        if (!(name in source)) {\n            return () => {\n                //\n            }\n        }\n\n        const original = source[name] as () => unknown\n        const wrapped = replacement(original)\n\n        // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n        // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n        if (isFunction(wrapped)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            wrapped.prototype = wrapped.prototype || {}\n            Object.defineProperties(wrapped, {\n                __posthog_wrapped__: {\n                    enumerable: false,\n                    value: true,\n                },\n            })\n        }\n\n        source[name] = wrapped\n\n        return () => {\n            source[name] = original\n        }\n    } catch {\n        return () => {\n            //\n        }\n        // This can throw if multiple fill happens on a global object like XMLHttpRequest\n        // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n}\n"]}