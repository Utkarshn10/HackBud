{"version":3,"file":"action-matcher.js","sourceRoot":"","sources":["../../../../src/extensions/surveys/action-matcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../../posthog-core'\nimport { ActionStepStringMatching, ActionStepType, ActionType, SurveyElement } from '../../posthog-surveys-types'\nimport { SimpleEventEmitter } from '../../utils/simple-event-emitter'\nimport { CaptureResult } from '../../types'\nimport { isUndefined } from '../../utils/type-utils'\nimport { window } from '../../utils/globals'\nimport { isUrlMatchingRegex } from '../../utils/request-utils'\n\nexport class ActionMatcher {\n    private readonly actionRegistry?: Set<ActionType>\n    private readonly instance?: PostHog\n    private readonly actionEvents: Set<string>\n    private _debugEventEmitter = new SimpleEventEmitter()\n\n    constructor(instance?: PostHog) {\n        this.instance = instance\n        this.actionEvents = new Set<string>()\n        this.actionRegistry = new Set<ActionType>()\n    }\n\n    init() {\n        if (!isUndefined(this.instance?._addCaptureHook)) {\n            const matchEventToAction = (eventName: string, eventPayload: any) => {\n                this.on(eventName, eventPayload)\n            }\n            this.instance?._addCaptureHook(matchEventToAction)\n        }\n    }\n\n    register(actions: ActionType[]): void {\n        if (isUndefined(this.instance?._addCaptureHook)) {\n            return\n        }\n\n        actions.forEach((action) => {\n            this.actionRegistry?.add(action)\n            action.steps?.forEach((step) => {\n                this.actionEvents?.add(step?.event || '')\n            })\n        })\n\n        if (this.instance?.autocapture) {\n            const selectorsToWatch: Set<string> = new Set<string>()\n            actions.forEach((action) => {\n                action.steps?.forEach((step) => {\n                    if (step?.selector) {\n                        selectorsToWatch.add(step?.selector)\n                    }\n                })\n            })\n            this.instance?.autocapture.setElementSelectors(selectorsToWatch)\n        }\n    }\n\n    on(eventName: string, eventPayload?: CaptureResult) {\n        if (eventPayload == null || eventName.length == 0) {\n            return\n        }\n\n        if (!this.actionEvents.has(eventName) && !this.actionEvents.has(<string>eventPayload?.event)) {\n            return\n        }\n\n        if (this.actionRegistry && this.actionRegistry?.size > 0) {\n            this.actionRegistry.forEach((action) => {\n                if (this.checkAction(eventPayload, action)) {\n                    this._debugEventEmitter.emit('actionCaptured', action.name)\n                }\n            })\n        }\n    }\n\n    _addActionHook(callback: (actionName: string, eventPayload?: any) => void): void {\n        this.onAction('actionCaptured', (data) => callback(data))\n    }\n\n    private checkAction(event?: CaptureResult, action?: ActionType): boolean {\n        if (action?.steps == null) {\n            return false\n        }\n\n        for (const step of action.steps) {\n            if (this.checkStep(event, step)) {\n                return true\n            }\n        }\n\n        return false\n    }\n\n    onAction(event: 'actionCaptured', cb: (...args: any[]) => void): () => void {\n        return this._debugEventEmitter.on(event, cb)\n    }\n\n    private checkStep = (event?: CaptureResult, step?: ActionStepType): boolean => {\n        return this.checkStepEvent(event, step) && this.checkStepUrl(event, step) && this.checkStepElement(event, step)\n    }\n\n    private checkStepEvent = (event?: CaptureResult, step?: ActionStepType): boolean => {\n        // CHECK CONDITIONS, OTHERWISE SKIPPED\n        if (step?.event && event?.event !== step?.event) {\n            return false // EVENT NAME IS A MISMATCH\n        }\n        return true\n    }\n\n    private checkStepUrl(event?: CaptureResult, step?: ActionStepType): boolean {\n        // CHECK CONDITIONS, OTHERWISE SKIPPED\n        if (step?.url) {\n            const eventUrl = event?.properties?.$current_url\n            if (!eventUrl || typeof eventUrl !== 'string') {\n                return false // URL IS UNKNOWN\n            }\n            if (!ActionMatcher.matchString(eventUrl, step?.url, step?.url_matching || 'contains')) {\n                return false // URL IS A MISMATCH\n            }\n        }\n        return true\n    }\n\n    private static matchString(url: string, pattern: string, matching: ActionStepStringMatching): boolean {\n        switch (matching) {\n            case 'regex':\n                return !!window && isUrlMatchingRegex(url, pattern)\n            case 'exact':\n                return pattern === url\n            case 'contains':\n                // Simulating SQL LIKE behavior (_ = any single character, % = any zero or more characters)\n                // eslint-disable-next-line no-case-declarations\n                const adjustedRegExpStringPattern = ActionMatcher.escapeStringRegexp(pattern)\n                    .replace(/_/g, '.')\n                    .replace(/%/g, '.*')\n                return isUrlMatchingRegex(url, adjustedRegExpStringPattern)\n\n            default:\n                return false\n        }\n    }\n\n    private static escapeStringRegexp(pattern: string): string {\n        // Escape characters with special meaning either inside or outside character sets.\n        // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n        return pattern.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d')\n    }\n\n    private checkStepElement(event?: CaptureResult, step?: ActionStepType): boolean {\n        // CHECK CONDITIONS, OTHERWISE SKIPPED\n        if (step?.href || step?.tag_name || step?.text) {\n            const elements = this.getElementsList(event)\n            if (\n                !elements.some((element) => {\n                    if (\n                        step?.href &&\n                        !ActionMatcher.matchString(element.href || '', step?.href, step?.href_matching || 'exact')\n                    ) {\n                        return false // ELEMENT HREF IS A MISMATCH\n                    }\n                    if (step?.tag_name && element.tag_name !== step?.tag_name) {\n                        return false // ELEMENT TAG NAME IS A MISMATCH\n                    }\n                    if (\n                        step?.text &&\n                        !(\n                            ActionMatcher.matchString(element.text || '', step?.text, step?.text_matching || 'exact') ||\n                            ActionMatcher.matchString(\n                                element.$el_text || '',\n                                step?.text,\n                                step?.text_matching || 'exact'\n                            )\n                        )\n                    ) {\n                        return false // ELEMENT TEXT IS A MISMATCH\n                    }\n                    return true\n                })\n            ) {\n                // AT LEAST ONE ELEMENT MUST BE A SUBMATCH\n                return false\n            }\n        }\n\n        if (step?.selector) {\n            const elementSelectors = event?.properties?.$element_selectors as unknown as string[]\n            if (!elementSelectors) {\n                return false // SELECTOR IS A MISMATCH\n            }\n            if (!elementSelectors.includes(step?.selector)) {\n                return false // SELECTOR IS A MISMATCH\n            }\n        }\n\n        return true\n    }\n\n    private getElementsList(event?: CaptureResult): SurveyElement[] {\n        if (event?.properties.$elements == null) {\n            return []\n        }\n\n        return event?.properties.$elements as unknown as SurveyElement[]\n    }\n}\n"]}