{"version":3,"file":"retry-queue.js","sourceRoot":"","sources":["../../src/retry-queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { RetriableRequestOptions } from './types'\n\nimport { isNumber, isUndefined } from './utils/type-utils'\nimport { logger } from './utils/logger'\nimport { window } from './utils/globals'\nimport { PostHog } from './posthog-core'\nimport { extendURLParams } from './request'\n\nconst thirtyMinutes = 30 * 60 * 1000\n\n/**\n * Generates a jitter-ed exponential backoff delay in milliseconds\n *\n * The base value is 6 seconds, which is doubled with each retry\n * up to the maximum of 30 minutes\n *\n * Each value then has +/- 50% jitter\n *\n * Giving a range of 6 seconds up to 45 minutes\n */\nexport function pickNextRetryDelay(retriesPerformedSoFar: number): number {\n    const rawBackoffTime = 3000 * 2 ** retriesPerformedSoFar\n    const minBackoff = rawBackoffTime / 2\n    const cappedBackoffTime = Math.min(thirtyMinutes, rawBackoffTime)\n    const jitterFraction = Math.random() - 0.5 // A random number between -0.5 and 0.5\n    const jitter = jitterFraction * (cappedBackoffTime - minBackoff)\n    return Math.ceil(cappedBackoffTime + jitter)\n}\n\ninterface RetryQueueElement {\n    retryAt: number\n    requestOptions: RetriableRequestOptions\n}\n\nexport class RetryQueue {\n    private isPolling: boolean = false // flag to continue to recursively poll or not\n    private poller: number | undefined // to become interval for reference to clear later\n    private pollIntervalMs: number = 3000\n    private queue: RetryQueueElement[] = []\n    private areWeOnline: boolean\n\n    constructor(private instance: PostHog) {\n        this.queue = []\n        this.areWeOnline = true\n\n        if (!isUndefined(window) && 'onLine' in window.navigator) {\n            this.areWeOnline = window.navigator.onLine\n            window.addEventListener('online', () => {\n                this.areWeOnline = true\n                this.flush()\n            })\n            window.addEventListener('offline', () => {\n                this.areWeOnline = false\n            })\n        }\n    }\n\n    retriableRequest({ retriesPerformedSoFar, ...options }: RetriableRequestOptions): void {\n        if (isNumber(retriesPerformedSoFar) && retriesPerformedSoFar > 0) {\n            options.url = extendURLParams(options.url, { retry_count: retriesPerformedSoFar })\n        }\n\n        this.instance._send_request({\n            ...options,\n            callback: (response) => {\n                if (response.statusCode !== 200 && (response.statusCode < 400 || response.statusCode >= 500)) {\n                    if ((retriesPerformedSoFar ?? 0) < 10) {\n                        this.enqueue({\n                            retriesPerformedSoFar,\n                            ...options,\n                        })\n                        return\n                    }\n                }\n\n                options.callback?.(response)\n            },\n        })\n    }\n\n    private enqueue(requestOptions: RetriableRequestOptions): void {\n        const retriesPerformedSoFar = requestOptions.retriesPerformedSoFar || 0\n        requestOptions.retriesPerformedSoFar = retriesPerformedSoFar + 1\n\n        const msToNextRetry = pickNextRetryDelay(retriesPerformedSoFar)\n        const retryAt = Date.now() + msToNextRetry\n\n        this.queue.push({ retryAt, requestOptions })\n\n        let logMessage = `Enqueued failed request for retry in ${msToNextRetry}`\n        if (!navigator.onLine) {\n            logMessage += ' (Browser is offline)'\n        }\n        logger.warn(logMessage)\n\n        if (!this.isPolling) {\n            this.isPolling = true\n            this.poll()\n        }\n    }\n\n    private poll(): void {\n        this.poller && clearTimeout(this.poller)\n        this.poller = setTimeout(() => {\n            if (this.areWeOnline && this.queue.length > 0) {\n                this.flush()\n            }\n            this.poll()\n        }, this.pollIntervalMs) as any as number\n    }\n\n    private flush(): void {\n        const now = Date.now()\n        const notToFlush: RetryQueueElement[] = []\n        const toFlush = this.queue.filter((item) => {\n            if (item.retryAt < now) {\n                return true\n            }\n            notToFlush.push(item)\n            return false\n        })\n\n        this.queue = notToFlush\n\n        if (toFlush.length > 0) {\n            for (const { requestOptions } of toFlush) {\n                this.retriableRequest(requestOptions)\n            }\n        }\n    }\n\n    unload(): void {\n        if (this.poller) {\n            clearTimeout(this.poller)\n            this.poller = undefined\n        }\n\n        for (const { requestOptions } of this.queue) {\n            try {\n                // we've had send beacon in place for at least 2 years\n                // eslint-disable-next-line compat/compat\n                this.instance._send_request({\n                    ...requestOptions,\n                    transport: 'sendBeacon',\n                })\n            } catch (e) {\n                // Note sendBeacon automatically retries, and after the first retry it will lose reference to contextual `this`.\n                // This means in some cases `this.getConfig` will be undefined.\n                logger.error(e)\n            }\n        }\n        this.queue = []\n    }\n}\n"]}