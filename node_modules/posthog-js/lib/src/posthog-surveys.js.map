{"version":3,"file":"posthog-surveys.js","sourceRoot":"","sources":["../../src/posthog-surveys.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { SURVEYS } from './constants'\nimport {\n    Survey,\n    SurveyCallback,\n    SurveyQuestionBranchingType,\n    SurveyQuestionType,\n    SurveyUrlMatchType,\n} from './posthog-surveys-types'\nimport { isUrlMatchingRegex } from './utils/request-utils'\nimport { SurveyEventReceiver } from './utils/survey-event-receiver'\nimport { assignableWindow, document, window } from './utils/globals'\nimport { DecideResponse } from './types'\nimport { logger } from './utils/logger'\nimport { isNullish } from './utils/type-utils'\n\nconst LOGGER_PREFIX = '[Surveys]'\n\nexport const surveyUrlValidationMap: Record<SurveyUrlMatchType, (conditionsUrl: string) => boolean> = {\n    icontains: (conditionsUrl) =>\n        !!window && window.location.href.toLowerCase().indexOf(conditionsUrl.toLowerCase()) > -1,\n    not_icontains: (conditionsUrl) =>\n        !!window && window.location.href.toLowerCase().indexOf(conditionsUrl.toLowerCase()) === -1,\n    regex: (conditionsUrl) => !!window && isUrlMatchingRegex(window.location.href, conditionsUrl),\n    not_regex: (conditionsUrl) => !!window && !isUrlMatchingRegex(window.location.href, conditionsUrl),\n    exact: (conditionsUrl) => window?.location.href === conditionsUrl,\n    is_not: (conditionsUrl) => window?.location.href !== conditionsUrl,\n}\n\nfunction getRatingBucketForResponseValue(responseValue: number, scale: number) {\n    if (scale === 3) {\n        if (responseValue < 1 || responseValue > 3) {\n            throw new Error('The response must be in range 1-3')\n        }\n\n        return responseValue === 1 ? 'negative' : responseValue === 2 ? 'neutral' : 'positive'\n    } else if (scale === 5) {\n        if (responseValue < 1 || responseValue > 5) {\n            throw new Error('The response must be in range 1-5')\n        }\n\n        return responseValue <= 2 ? 'negative' : responseValue === 3 ? 'neutral' : 'positive'\n    } else if (scale === 7) {\n        if (responseValue < 1 || responseValue > 7) {\n            throw new Error('The response must be in range 1-7')\n        }\n\n        return responseValue <= 3 ? 'negative' : responseValue === 4 ? 'neutral' : 'positive'\n    } else if (scale === 10) {\n        if (responseValue < 0 || responseValue > 10) {\n            throw new Error('The response must be in range 0-10')\n        }\n\n        return responseValue <= 6 ? 'detractors' : responseValue <= 8 ? 'passives' : 'promoters'\n    }\n\n    throw new Error('The scale must be one of: 3, 5, 7, 10')\n}\n\nexport class PostHogSurveys {\n    private _decideServerResponse?: boolean\n    public _surveyEventReceiver: SurveyEventReceiver | null\n    private _surveyManager: any\n\n    constructor(private readonly instance: PostHog) {\n        // we set this to undefined here because we need the persistence storage for this type\n        // but that's not initialized until loadIfEnabled is called.\n        this._surveyEventReceiver = null\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        this._decideServerResponse = !!response['surveys']\n        this.loadIfEnabled()\n    }\n\n    loadIfEnabled() {\n        const surveysGenerator = assignableWindow?.__PosthogExtensions__?.generateSurveys\n\n        if (!this.instance.config.disable_surveys && this._decideServerResponse && !surveysGenerator) {\n            if (this._surveyEventReceiver == null) {\n                this._surveyEventReceiver = new SurveyEventReceiver(this.instance)\n            }\n\n            assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(this.instance, 'surveys', (err) => {\n                if (err) {\n                    return logger.error(LOGGER_PREFIX, 'Could not load surveys script', err)\n                }\n\n                this._surveyManager = assignableWindow.__PosthogExtensions__?.generateSurveys?.(this.instance)\n            })\n        }\n    }\n\n    getSurveys(callback: SurveyCallback, forceReload = false) {\n        // In case we manage to load the surveys script, but config says not to load surveys\n        // then we shouldn't return survey data\n        if (this.instance.config.disable_surveys) {\n            return callback([])\n        }\n\n        if (this._surveyEventReceiver == null) {\n            this._surveyEventReceiver = new SurveyEventReceiver(this.instance)\n        }\n\n        const existingSurveys = this.instance.get_property(SURVEYS)\n\n        if (!existingSurveys || forceReload) {\n            this.instance._send_request({\n                url: this.instance.requestRouter.endpointFor(\n                    'api',\n                    `/api/surveys/?token=${this.instance.config.token}`\n                ),\n                method: 'GET',\n                transport: 'XHR',\n                callback: (response) => {\n                    if (response.statusCode !== 200 || !response.json) {\n                        return callback([])\n                    }\n                    const surveys = response.json.surveys || []\n\n                    const eventOrActionBasedSurveys = surveys.filter(\n                        (survey: Survey) =>\n                            (survey.conditions?.events &&\n                                survey.conditions?.events?.values &&\n                                survey.conditions?.events?.values?.length > 0) ||\n                            (survey.conditions?.actions &&\n                                survey.conditions?.actions?.values &&\n                                survey.conditions?.actions?.values?.length > 0)\n                    )\n\n                    if (eventOrActionBasedSurveys.length > 0) {\n                        this._surveyEventReceiver?.register(eventOrActionBasedSurveys)\n                    }\n\n                    this.instance.persistence?.register({ [SURVEYS]: surveys })\n                    return callback(surveys)\n                },\n            })\n        } else {\n            return callback(existingSurveys)\n        }\n    }\n\n    getActiveMatchingSurveys(callback: SurveyCallback, forceReload = false) {\n        this.getSurveys((surveys) => {\n            const activeSurveys = surveys.filter((survey) => {\n                return !!(survey.start_date && !survey.end_date)\n            })\n\n            const conditionMatchedSurveys = activeSurveys.filter((survey) => {\n                if (!survey.conditions) {\n                    return true\n                }\n\n                // use urlMatchType to validate url condition, fallback to contains for backwards compatibility\n                const urlCheck = survey.conditions?.url\n                    ? surveyUrlValidationMap[survey.conditions?.urlMatchType ?? 'icontains'](survey.conditions.url)\n                    : true\n                const selectorCheck = survey.conditions?.selector\n                    ? document?.querySelector(survey.conditions.selector)\n                    : true\n                return urlCheck && selectorCheck\n            })\n\n            // get all the surveys that have been activated so far with user actions.\n            const activatedSurveys: string[] | undefined = this._surveyEventReceiver?.getSurveys()\n            const targetingMatchedSurveys = conditionMatchedSurveys.filter((survey) => {\n                if (!survey.linked_flag_key && !survey.targeting_flag_key && !survey.internal_targeting_flag_key) {\n                    return true\n                }\n                const linkedFlagCheck = survey.linked_flag_key\n                    ? this.instance.featureFlags.isFeatureEnabled(survey.linked_flag_key)\n                    : true\n                const targetingFlagCheck = survey.targeting_flag_key\n                    ? this.instance.featureFlags.isFeatureEnabled(survey.targeting_flag_key)\n                    : true\n\n                const hasEvents =\n                    survey.conditions?.events &&\n                    survey.conditions?.events?.values &&\n                    survey.conditions?.events?.values.length > 0\n\n                const hasActions =\n                    survey.conditions?.actions &&\n                    survey.conditions?.actions?.values &&\n                    survey.conditions?.actions?.values.length > 0\n                const eventBasedTargetingFlagCheck =\n                    hasEvents || hasActions ? activatedSurveys?.includes(survey.id) : true\n\n                const overrideInternalTargetingFlagCheck = this._canActivateRepeatedly(survey)\n                const internalTargetingFlagCheck =\n                    survey.internal_targeting_flag_key && !overrideInternalTargetingFlagCheck\n                        ? this.instance.featureFlags.isFeatureEnabled(survey.internal_targeting_flag_key)\n                        : true\n\n                return (\n                    linkedFlagCheck && targetingFlagCheck && internalTargetingFlagCheck && eventBasedTargetingFlagCheck\n                )\n            })\n\n            return callback(targetingMatchedSurveys)\n        }, forceReload)\n    }\n\n    getNextSurveyStep(survey: Survey, currentQuestionIndex: number, response: string | string[] | number | null) {\n        const question = survey.questions[currentQuestionIndex]\n        const nextQuestionIndex = currentQuestionIndex + 1\n\n        if (!question.branching?.type) {\n            if (currentQuestionIndex === survey.questions.length - 1) {\n                return SurveyQuestionBranchingType.End\n            }\n\n            return nextQuestionIndex\n        }\n\n        if (question.branching.type === SurveyQuestionBranchingType.End) {\n            return SurveyQuestionBranchingType.End\n        } else if (question.branching.type === SurveyQuestionBranchingType.SpecificQuestion) {\n            if (Number.isInteger(question.branching.index)) {\n                return question.branching.index\n            }\n        } else if (question.branching.type === SurveyQuestionBranchingType.ResponseBased) {\n            // Single choice\n            if (question.type === SurveyQuestionType.SingleChoice) {\n                // :KLUDGE: for now, look up the choiceIndex based on the response\n                // TODO: once QuestionTypes.MultipleChoiceQuestion is refactored, pass the selected choiceIndex into this method\n                const selectedChoiceIndex = question.choices.indexOf(`${response}`)\n\n                if (question.branching?.responseValues?.hasOwnProperty(selectedChoiceIndex)) {\n                    const nextStep = question.branching.responseValues[selectedChoiceIndex]\n\n                    // Specific question\n                    if (Number.isInteger(nextStep)) {\n                        return nextStep\n                    }\n\n                    if (nextStep === SurveyQuestionBranchingType.End) {\n                        return SurveyQuestionBranchingType.End\n                    }\n\n                    return nextQuestionIndex\n                }\n            } else if (question.type === SurveyQuestionType.Rating) {\n                if (typeof response !== 'number' || !Number.isInteger(response)) {\n                    throw new Error('The response type must be an integer')\n                }\n\n                const ratingBucket = getRatingBucketForResponseValue(response, question.scale)\n\n                if (question.branching?.responseValues?.hasOwnProperty(ratingBucket)) {\n                    const nextStep = question.branching.responseValues[ratingBucket]\n\n                    // Specific question\n                    if (Number.isInteger(nextStep)) {\n                        return nextStep\n                    }\n\n                    if (nextStep === SurveyQuestionBranchingType.End) {\n                        return SurveyQuestionBranchingType.End\n                    }\n\n                    return nextQuestionIndex\n                }\n            }\n\n            return nextQuestionIndex\n        }\n\n        logger.warn(LOGGER_PREFIX, 'Falling back to next question index due to unexpected branching type')\n        return nextQuestionIndex\n    }\n\n    // this method is lazily loaded onto the window to avoid loading preact and other dependencies if surveys is not enabled\n    private _canActivateRepeatedly(survey: Survey) {\n        if (isNullish(assignableWindow.__PosthogExtensions__?.canActivateRepeatedly)) {\n            logger.warn(LOGGER_PREFIX, 'canActivateRepeatedly is not defined, must init before calling')\n            return false // TODO does it make sense to have a default here?\n        }\n        return assignableWindow.__PosthogExtensions__.canActivateRepeatedly(survey)\n    }\n\n    canRenderSurvey(surveyId: string) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn(LOGGER_PREFIX, 'canActivateRepeatedly is not defined, must init before calling')\n            return\n        }\n        this.getSurveys((surveys) => {\n            const survey = surveys.filter((x) => x.id === surveyId)[0]\n\n            this._surveyManager.canRenderSurvey(survey)\n        })\n    }\n\n    renderSurvey(surveyId: string, selector: string) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn(LOGGER_PREFIX, 'canActivateRepeatedly is not defined, must init before calling')\n            return\n        }\n        this.getSurveys((surveys) => {\n            const survey = surveys.filter((x) => x.id === surveyId)[0]\n\n            this._surveyManager.renderSurvey(survey, document?.querySelector(selector))\n        })\n    }\n}\n"]}