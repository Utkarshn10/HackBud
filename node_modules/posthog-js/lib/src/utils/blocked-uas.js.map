{"version":3,"file":"blocked-uas.js","sourceRoot":"","sources":["../../../src/utils/blocked-uas.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,IAAM,uBAAuB,GAAG;IACnC,WAAW;IACX,iBAAiB;IACjB,UAAU;IACV,aAAa;IACb,SAAS;IACT,aAAa;IACb,SAAS;IACT,SAAS;IACT,SAAS;IACT,UAAU;IACV,aAAa;IACb,kBAAkB;IAClB,iBAAiB;IACjB,QAAQ;IACR,wBAAwB;IACxB,SAAS;IACT,aAAa;IACb,aAAa;IACb,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,UAAU;IACV,WAAW;IACX,WAAW;IACX,UAAU;IACV,gBAAgB;IAChB,YAAY;IACZ,UAAU;IACV,OAAO;IACP,UAAU;IACV,YAAY;IACZ,WAAW;IACX,cAAc;IACd,WAAW;IAEX,oBAAoB;IACpB,gBAAgB;IAChB,SAAS;IACT,kFAAkF;IAElF,0CAA0C;IAC1C,uFAAuF;IACvF,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,kBAAkB;IAClB,oBAAoB;IACpB,gBAAgB;IAChB,oBAAoB;IACpB,mBAAmB;IACnB,WAAW;IACX,gBAAgB;IAChB,sBAAsB;IACtB,iBAAiB;IACjB,aAAa;CAChB,CAAA;AAED;;GAEG;AACH,MAAM,CAAC,IAAM,WAAW,GAAG,UAAU,EAAU,EAAE,uBAAiC;IAC9E,IAAI,CAAC,EAAE,EAAE,CAAC;QACN,OAAO,KAAK,CAAA;IAChB,CAAC;IACD,IAAM,OAAO,GAAG,EAAE,CAAC,WAAW,EAAE,CAAA;IAChC,OAAO,uBAAuB,CAAC,MAAM,CAAC,uBAAuB,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,SAAS;QAChF,IAAM,cAAc,GAAG,SAAS,CAAC,WAAW,EAAE,CAAA;QAE9C,sCAAsC;QACtC,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAA;IACjD,CAAC,CAAC,CAAA;AACN,CAAC,CAAA;AAmBD,MAAM,CAAC,IAAM,WAAW,GAAG,UAAU,SAAgC,EAAE,uBAAiC;IACpG,IAAI,CAAC,SAAS,EAAE,CAAC;QACb,OAAO,KAAK,CAAA;IAChB,CAAC;IACD,IAAM,EAAE,GAAG,SAAS,CAAC,SAAS,CAAA;IAC9B,IAAI,EAAE,EAAE,CAAC;QACL,IAAI,WAAW,CAAC,EAAE,EAAE,uBAAuB,CAAC,EAAE,CAAC;YAC3C,OAAO,IAAI,CAAA;QACf,CAAC;IACL,CAAC;IACD,IAAI,CAAC;QACD,yCAAyC;QACzC,IAAM,MAAM,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,aAAgC,CAAA;QAC1D,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,KAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,QAAQ,IAAK,OAAA,WAAW,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,EAAE,uBAAuB,CAAC,EAArD,CAAqD,CAAC,EAAE,CAAC;YAC5G,OAAO,IAAI,CAAA;QACf,CAAC;IACL,CAAC;IAAC,WAAM,CAAC;QACL,gEAAgE;IACpE,CAAC;IAED,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAA;IAE5B,iHAAiH;IACjH,4GAA4G;IAC5G,sFAAsF;IAEtF,kHAAkH;IAClH,8GAA8G;IAC9G,4FAA4F;IAC5F,8FAA8F;AAClG,CAAC,CAAA","sourcesContent":["export const DEFAULT_BLOCKED_UA_STRS = [\n    'ahrefsbot',\n    'ahrefssiteaudit',\n    'applebot',\n    'baiduspider',\n    'bingbot',\n    'bingpreview',\n    'bot.htm',\n    'bot.php',\n    'crawler',\n    'deepscan',\n    'duckduckbot',\n    'facebookexternal',\n    'facebookcatalog',\n    'gptbot',\n    'http://yandex.com/bots',\n    'hubspot',\n    'ia_archiver',\n    'linkedinbot',\n    'mj12bot',\n    'msnbot',\n    'nessus',\n    'petalbot',\n    'pinterest',\n    'prerender',\n    'rogerbot',\n    'screaming frog',\n    'semrushbot',\n    'sitebulb',\n    'slurp',\n    'turnitin',\n    'twitterbot',\n    'vercelbot',\n    'yahoo! slurp',\n    'yandexbot',\n\n    // headless browsers\n    'headlesschrome',\n    'cypress',\n    // we don't block electron here, as many customers use posthog-js in electron apps\n\n    // a whole bunch of goog-specific crawlers\n    // https://developers.google.com/search/docs/advanced/crawling/overview-google-crawlers\n    'Google-HotelAdsVerifier',\n    'adsbot-google',\n    'apis-google',\n    'duplexweb-google',\n    'feedfetcher-google',\n    'google favicon',\n    'google web preview',\n    'google-read-aloud',\n    'googlebot',\n    'googleweblight',\n    'mediapartners-google',\n    'storebot-google',\n    'Bytespider;',\n]\n\n/**\n * Block various web spiders from executing our JS and sending false capturing data\n */\nexport const isBlockedUA = function (ua: string, customBlockedUserAgents: string[]): boolean {\n    if (!ua) {\n        return false\n    }\n    const uaLower = ua.toLowerCase()\n    return DEFAULT_BLOCKED_UA_STRS.concat(customBlockedUserAgents || []).some((blockedUA) => {\n        const blockedUaLower = blockedUA.toLowerCase()\n\n        // can't use includes because IE 11 :/\n        return uaLower.indexOf(blockedUaLower) !== -1\n    })\n}\n\n// There's more in the type, but this is all we use. It's currently experimental, see\n// https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgentData\n// if you're reading this in the future, when it's no longer experimental, please remove this type and use an official one.\n// Be extremely defensive here to ensure backwards and *forwards* compatibility, and remove this defensiveness in the\n// future when it is safe to do so.\nexport interface NavigatorUAData {\n    brands?: {\n        brand: string\n        version: string\n    }[]\n}\ndeclare global {\n    interface Navigator {\n        userAgentData?: NavigatorUAData\n    }\n}\n\nexport const isLikelyBot = function (navigator: Navigator | undefined, customBlockedUserAgents: string[]): boolean {\n    if (!navigator) {\n        return false\n    }\n    const ua = navigator.userAgent\n    if (ua) {\n        if (isBlockedUA(ua, customBlockedUserAgents)) {\n            return true\n        }\n    }\n    try {\n        // eslint-disable-next-line compat/compat\n        const uaData = navigator?.userAgentData as NavigatorUAData\n        if (uaData?.brands && uaData.brands.some((brandObj) => isBlockedUA(brandObj?.brand, customBlockedUserAgents))) {\n            return true\n        }\n    } catch {\n        // ignore the error, we were using experimental browser features\n    }\n\n    return !!navigator.webdriver\n\n    // There's some more enhancements we could make in this area, e.g. it's possible to check if Chrome dev tools are\n    // open, which will detect some bots that are trying to mask themselves and might get past the checks above.\n    // However, this would give false positives for actual humans who have dev tools open.\n\n    // We could also use the data in navigator.userAgentData.getHighEntropyValues() to detect bots, but we should wait\n    // until this stops being experimental. The MDN docs imply that this might eventually require user permission.\n    // See https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData/getHighEntropyValues\n    // It would be very bad if posthog-js caused a permission prompt to appear on every page load.\n}\n"]}