{"version":3,"file":"request-router.js","sourceRoot":"","sources":["../../../src/utils/request-router.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../posthog-core'\n\n/**\n * The request router helps simplify the logic to determine which endpoints should be called for which things\n * The basic idea is that for a given region (US or EU), we have a set of endpoints that we should call depending\n * on the type of request (events, replays, decide, etc.) and handle overrides that may come from configs or the decide endpoint\n */\n\nexport enum RequestRouterRegion {\n    US = 'us',\n    EU = 'eu',\n    CUSTOM = 'custom',\n}\n\nexport type RequestRouterTarget = 'api' | 'ui' | 'assets'\n\nconst ingestionDomain = 'i.posthog.com'\n\nexport class RequestRouter {\n    instance: PostHog\n    private _regionCache: Record<string, RequestRouterRegion> = {}\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n    }\n\n    get apiHost(): string {\n        const host = this.instance.config.api_host.trim().replace(/\\/$/, '')\n        if (host === 'https://app.posthog.com') {\n            return 'https://us.i.posthog.com'\n        }\n        return host\n    }\n    get uiHost(): string | undefined {\n        let host = this.instance.config.ui_host?.replace(/\\/$/, '')\n\n        if (!host) {\n            // No ui_host set, get it from the api_host. But api_host differs\n            // from the actual UI host, so replace the ingestion subdomain with just posthog.com\n            host = this.apiHost.replace(`.${ingestionDomain}`, '.posthog.com')\n        }\n\n        if (host === 'https://app.posthog.com') {\n            return 'https://us.posthog.com'\n        }\n\n        return host\n    }\n\n    get region(): RequestRouterRegion {\n        // We don't need to compute this every time so we cache the result\n        if (!this._regionCache[this.apiHost]) {\n            if (/https:\\/\\/(app|us|us-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost)) {\n                this._regionCache[this.apiHost] = RequestRouterRegion.US\n            } else if (/https:\\/\\/(eu|eu-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost)) {\n                this._regionCache[this.apiHost] = RequestRouterRegion.EU\n            } else {\n                this._regionCache[this.apiHost] = RequestRouterRegion.CUSTOM\n            }\n        }\n        return this._regionCache[this.apiHost]\n    }\n\n    endpointFor(target: RequestRouterTarget, path: string = ''): string {\n        if (path) {\n            path = path[0] === '/' ? path : `/${path}`\n        }\n\n        if (target === 'ui') {\n            return this.uiHost + path\n        }\n\n        if (this.region === RequestRouterRegion.CUSTOM) {\n            return this.apiHost + path\n        }\n\n        const suffix = ingestionDomain + path\n\n        switch (target) {\n            case 'assets':\n                return `https://${this.region}-assets.${suffix}`\n            case 'api':\n                return `https://${this.region}.${suffix}`\n        }\n    }\n}\n"]}