{"version":3,"file":"external-scripts-loader.js","sources":["../src/utils/globals.ts","../src/utils/logger.ts","../src/utils/type-utils.ts","../src/entrypoints/external-scripts-loader.ts"],"sourcesContent":["import { ErrorProperties } from '../extensions/exception-autocapture/error-conversion'\nimport type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport { ErrorEventArgs, ErrorMetadata, Properties } from '../types'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'tracing-headers'\n    | 'surveys'\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    parseErrorAsProperties?: (\n        [event, source, lineno, colno, error]: ErrorEventArgs,\n        metadata?: ErrorMetadata\n    ) => ErrorProperties\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: Properties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: Properties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string; rrwebVersion: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    canActivateRepeatedly?: (survey: any) => boolean\n    generateSurveys?: (posthog: PostHog) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (sessionManager: SessionIdManager) => () => void\n        _patchXHR: (sessionManager: any) => () => void\n    }\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: Window &\n    typeof globalThis &\n    Record<string, any> & {\n        __PosthogExtensions__?: PostHogExtensions\n    } = win ?? ({} as any)\n\nexport { win as window }\n","import Config from '../config'\nimport { isUndefined } from './type-utils'\nimport { assignableWindow, window } from './globals'\n\nconst LOGGER_PREFIX = '[PostHog.js]'\nexport const logger = {\n    _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => {\n        if (\n            window &&\n            (Config.DEBUG || assignableWindow.POSTHOG_DEBUG) &&\n            !isUndefined(window.console) &&\n            window.console\n        ) {\n            const consoleLog =\n                '__rrweb_original__' in window.console[level]\n                    ? (window.console[level] as any)['__rrweb_original__']\n                    : window.console[level]\n\n            // eslint-disable-next-line no-console\n            consoleLog(LOGGER_PREFIX, ...args)\n        }\n    },\n\n    info: (...args: any[]) => {\n        logger._log('log', ...args)\n    },\n\n    warn: (...args: any[]) => {\n        logger._log('warn', ...args)\n    },\n\n    error: (...args: any[]) => {\n        logger._log('error', ...args)\n    },\n\n    critical: (...args: any[]) => {\n        // Critical errors are always logged to the console\n        // eslint-disable-next-line no-console\n        console.error(LOGGER_PREFIX, ...args)\n    },\n\n    uninitializedWarning: (methodName: string) => {\n        logger.error(`You must initialize PostHog before calling ${methodName}`)\n    },\n}\n","// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\nexport const isUint8Array = function (x: unknown): x is Uint8Array {\n    return toString.call(x) === '[object Uint8Array]'\n}\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const isFunction = function (f: any): f is (...args: any[]) => any {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof f === 'function'\n}\n// Underscore Addons\nexport const isObject = function (x: unknown): x is Record<string, any> {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !isArray(x)\n}\nexport const isEmptyObject = function (x: unknown): x is Record<string, any> {\n    if (isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const isUndefined = function (x: unknown): x is undefined {\n    return x === void 0\n}\n\nexport const isString = function (x: unknown): x is string {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const isEmptyString = function (x: unknown): boolean {\n    return isString(x) && x.trim().length === 0\n}\n\nexport const isNull = function (x: unknown): x is null {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\n\n/*\n    sometimes you want to check if something is null or undefined\n    that's what this is for\n */\nexport const isNullish = function (x: unknown): x is null | undefined {\n    return isUndefined(x) || isNull(x)\n}\n\nexport const isDate = function (x: unknown): x is Date {\n    // eslint-disable-next-line posthog-js/no-direct-date-check\n    return toString.call(x) == '[object Date]'\n}\nexport const isNumber = function (x: unknown): x is number {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const isBoolean = function (x: unknown): x is boolean {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n\nexport const isDocument = (x: unknown): x is Document => {\n    // eslint-disable-next-line posthog-js/no-direct-document-check\n    return x instanceof Document\n}\n\nexport const isFormData = (x: unknown): x is FormData => {\n    // eslint-disable-next-line posthog-js/no-direct-form-data-check\n    return x instanceof FormData\n}\n\nexport const isFile = (x: unknown): x is File => {\n    // eslint-disable-next-line posthog-js/no-direct-file-check\n    return x instanceof File\n}\n","import type { PostHog } from '../posthog-core'\nimport { assignableWindow, document, PostHogExtensionKind } from '../utils/globals'\nimport { logger } from '../utils/logger'\n\nconst loadScript = (posthog: PostHog, url: string, callback: (error?: string | Event, event?: Event) => void) => {\n    if (posthog.config.disable_external_dependency_loading) {\n        logger.warn(`${url} was requested but loading of external scripts is disabled.`)\n        return callback('Loading of external scripts is disabled')\n    }\n\n    const addScript = () => {\n        if (!document) {\n            return callback('document not found')\n        }\n        const scriptTag = document.createElement('script')\n        scriptTag.type = 'text/javascript'\n        scriptTag.src = url\n        scriptTag.onload = (event) => callback(undefined, event)\n        scriptTag.onerror = (error) => callback(error)\n\n        const scripts = document.querySelectorAll('body > script')\n        if (scripts.length > 0) {\n            scripts[0].parentNode?.insertBefore(scriptTag, scripts[0])\n        } else {\n            // In exceptional situations this call might load before the DOM is fully ready.\n            document.body.appendChild(scriptTag)\n        }\n    }\n\n    if (document?.body) {\n        addScript()\n    } else {\n        document?.addEventListener('DOMContentLoaded', addScript)\n    }\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.loadExternalDependency = (\n    posthog: PostHog,\n    kind: PostHogExtensionKind,\n    callback: (error?: string | Event, event?: Event) => void\n): void => {\n    let scriptUrlToLoad = `/static/${kind}.js` + `?v=${posthog.version}`\n\n    if (kind === 'toolbar') {\n        // toolbar.js is served from the PostHog CDN, this has a TTL of 24 hours.\n        // the toolbar asset includes a rotating \"token\" that is valid for 5 minutes.\n        const fiveMinutesInMillis = 5 * 60 * 1000\n        // this ensures that we bust the cache periodically\n        const timestampToNearestFiveMinutes = Math.floor(Date.now() / fiveMinutesInMillis) * fiveMinutesInMillis\n\n        scriptUrlToLoad = `${scriptUrlToLoad}?&=${timestampToNearestFiveMinutes}`\n    }\n    const url = posthog.requestRouter.endpointFor('assets', scriptUrlToLoad)\n\n    loadScript(posthog, url, callback)\n}\n\nassignableWindow.__PosthogExtensions__.loadSiteApp = (\n    posthog: PostHog,\n    url: string,\n    callback: (error?: string | Event, event?: Event) => void\n): void => {\n    const scriptUrl = posthog.requestRouter.endpointFor('api', url)\n\n    loadScript(posthog, scriptUrl, callback)\n}\n"],"names":["win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","assignableWindow","LOGGER_PREFIX","logger","_log","level","console","consoleLog","_len","arguments","length","args","Array","_key","apply","concat","info","_len2","_key2","warn","_len3","_key3","error","_len4","_key4","critical","_console","_len5","_key5","uninitializedWarning","methodName","loadScript","posthog","url","callback","config","disable_external_dependency_loading","addScript","scriptTag","createElement","type","src","onload","event","onerror","_scripts$0$parentNode","scripts","querySelectorAll","parentNode","insertBefore","body","appendChild","addEventListener","__PosthogExtensions__","loadExternalDependency","kind","scriptUrlToLoad","version","fiveMinutesInMillis","timestampToNearestFiveMinutes","Math","floor","Date","now","requestRouter","endpointFor","loadSiteApp","scriptUrl"],"mappings":"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"}