{"version":3,"file":"surveys-preview.js","sources":["../src/posthog-surveys-types.ts","../src/utils/globals.ts","../node_modules/.pnpm/preact@10.19.3/node_modules/preact/dist/preact.module.js","../src/extensions/surveys/surveys-utils.tsx","../node_modules/.pnpm/preact@10.19.3/node_modules/preact/hooks/dist/hooks.module.js","../src/utils/type-utils.ts","../src/extensions/surveys/icons.tsx","../src/extensions/surveys/components/PostHogLogo.tsx","../src/extensions/surveys/components/BottomSection.tsx","../src/extensions/surveys/components/QuestionHeader.tsx","../src/extensions/surveys/components/ConfirmationMessage.tsx","../src/extensions/surveys/hooks/useContrastingTextColor.ts","../src/extensions/surveys/components/QuestionTypes.tsx","../src/extensions/surveys.tsx","../src/extensions/surveys-widget.ts"],"sourcesContent":["/**\n * Having Survey types in types.ts was confusing tsc\n * and generating an invalid module.d.ts\n * See https://github.com/PostHog/posthog-js/issues/698\n */\n\nexport interface SurveyAppearance {\n    // keep in sync with frontend/src/types.ts -> SurveyAppearance\n    backgroundColor?: string\n    submitButtonColor?: string\n    // text color is deprecated, use auto contrast text color instead\n    textColor?: string\n    // deprecate submit button text eventually\n    submitButtonText?: string\n    submitButtonTextColor?: string\n    descriptionTextColor?: string\n    ratingButtonColor?: string\n    ratingButtonActiveColor?: string\n    ratingButtonHoverColor?: string\n    whiteLabel?: boolean\n    autoDisappear?: boolean\n    displayThankYouMessage?: boolean\n    thankYouMessageHeader?: string\n    thankYouMessageDescription?: string\n    thankYouMessageDescriptionContentType?: SurveyQuestionDescriptionContentType\n    thankYouMessageCloseButtonText?: string\n    borderColor?: string\n    position?: 'left' | 'right' | 'center'\n    placeholder?: string\n    shuffleQuestions?: boolean\n    surveyPopupDelaySeconds?: number\n    // widget options\n    widgetType?: 'button' | 'tab' | 'selector'\n    widgetSelector?: string\n    widgetLabel?: string\n    widgetColor?: string\n    // questionable: Not in frontend/src/types.ts -> SurveyAppearance, but used in site app\n    maxWidth?: string\n    zIndex?: string\n}\n\nexport enum SurveyType {\n    Popover = 'popover',\n    API = 'api',\n    Widget = 'widget',\n}\n\nexport type SurveyQuestion = BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion | MultipleSurveyQuestion\n\nexport type SurveyQuestionDescriptionContentType = 'html' | 'text'\n\ninterface SurveyQuestionBase {\n    question: string\n    description?: string | null\n    descriptionContentType?: SurveyQuestionDescriptionContentType\n    optional?: boolean\n    buttonText?: string\n    originalQuestionIndex: number\n    branching?: NextQuestionBranching | EndBranching | ResponseBasedBranching | SpecificQuestionBranching\n}\n\nexport interface BasicSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Open\n}\n\nexport interface LinkSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Link\n    link?: string | null\n}\n\nexport interface RatingSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Rating\n    display: 'number' | 'emoji'\n    scale: 3 | 5 | 7 | 10\n    lowerBoundLabel: string\n    upperBoundLabel: string\n}\n\nexport interface MultipleSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.SingleChoice | SurveyQuestionType.MultipleChoice\n    choices: string[]\n    hasOpenChoice?: boolean\n    shuffleOptions?: boolean\n}\n\nexport enum SurveyQuestionType {\n    Open = 'open',\n    MultipleChoice = 'multiple_choice',\n    SingleChoice = 'single_choice',\n    Rating = 'rating',\n    Link = 'link',\n}\n\nexport enum SurveyQuestionBranchingType {\n    NextQuestion = 'next_question',\n    End = 'end',\n    ResponseBased = 'response_based',\n    SpecificQuestion = 'specific_question',\n}\n\ninterface NextQuestionBranching {\n    type: SurveyQuestionBranchingType.NextQuestion\n}\n\ninterface EndBranching {\n    type: SurveyQuestionBranchingType.End\n}\n\ninterface ResponseBasedBranching {\n    type: SurveyQuestionBranchingType.ResponseBased\n    responseValues: Record<string, any>\n}\n\ninterface SpecificQuestionBranching {\n    type: SurveyQuestionBranchingType.SpecificQuestion\n    index: number\n}\n\nexport interface SurveyResponse {\n    surveys: Survey[]\n}\n\nexport type SurveyCallback = (surveys: Survey[]) => void\n\nexport type SurveyUrlMatchType = 'regex' | 'not_regex' | 'exact' | 'is_not' | 'icontains' | 'not_icontains'\n\nexport interface SurveyElement {\n    text?: string\n    $el_text?: string\n    tag_name?: string\n    href?: string\n    attr_id?: string\n    attr_class?: string[]\n    nth_child?: number\n    nth_of_type?: number\n    attributes?: Record<string, any>\n    event_id?: number\n    order?: number\n    group_id?: number\n}\nexport interface SurveyRenderReason {\n    visible: boolean\n    disabledReason?: string\n}\n\nexport interface Survey {\n    // Sync this with the backend's SurveyAPISerializer!\n    id: string\n    name: string\n    description: string\n    type: SurveyType\n    linked_flag_key: string | null\n    targeting_flag_key: string | null\n    internal_targeting_flag_key: string | null\n    questions: SurveyQuestion[]\n    appearance: SurveyAppearance | null\n    conditions: {\n        url?: string\n        selector?: string\n        seenSurveyWaitPeriodInDays?: number\n        urlMatchType?: SurveyUrlMatchType\n        events: {\n            repeatedActivation?: boolean\n            values: {\n                name: string\n            }[]\n        } | null\n        actions: {\n            values: ActionType[]\n        } | null\n    } | null\n    start_date: string | null\n    end_date: string | null\n    current_iteration: number | null\n    current_iteration_start_date: string | null\n}\n\nexport interface ActionType {\n    count?: number\n    created_at: string\n    deleted?: boolean\n    id: number\n    name: string | null\n    steps?: ActionStepType[]\n    tags?: string[]\n    is_action?: true\n    action_id?: number // alias of id to make it compatible with event definitions uuid\n}\n\n/** Sync with plugin-server/src/types.ts */\nexport type ActionStepStringMatching = 'contains' | 'exact' | 'regex'\n\nexport interface ActionStepType {\n    event?: string | null\n    selector?: string | null\n    /** @deprecated Only `selector` should be used now. */\n    tag_name?: string\n    text?: string | null\n    /** @default StringMatching.Exact */\n    text_matching?: ActionStepStringMatching | null\n    href?: string | null\n    /** @default ActionStepStringMatching.Exact */\n    href_matching?: ActionStepStringMatching | null\n    url?: string | null\n    /** @default StringMatching.Contains */\n    url_matching?: ActionStepStringMatching | null\n}\n","import { ErrorProperties } from '../extensions/exception-autocapture/error-conversion'\nimport type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport { ErrorEventArgs, ErrorMetadata, Properties } from '../types'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'tracing-headers'\n    | 'surveys'\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    parseErrorAsProperties?: (\n        [event, source, lineno, colno, error]: ErrorEventArgs,\n        metadata?: ErrorMetadata\n    ) => ErrorProperties\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: Properties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: Properties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string; rrwebVersion: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    canActivateRepeatedly?: (survey: any) => boolean\n    generateSurveys?: (posthog: PostHog) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (sessionManager: SessionIdManager) => () => void\n        _patchXHR: (sessionManager: any) => () => void\n    }\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: Window &\n    typeof globalThis &\n    Record<string, any> & {\n        __PosthogExtensions__?: PostHogExtensions\n    } = win ?? ({} as any)\n\nexport { win as window }\n","var n,l,u,t,i,o,r,f,e,c={},s=[],a=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,h=Array.isArray;function v(n,l){for(var u in l)n[u]=l[u];return n}function p(n){var l=n.parentNode;l&&l.removeChild(n)}function y(l,u,t){var i,o,r,f={};for(r in u)\"key\"==r?i=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),\"function\"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return d(l,f,i,o,null)}function d(n,t,i,o,r){var f={type:n,props:t,key:i,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==r?++u:r,__i:-1,__u:0};return null==r&&null!=l.vnode&&l.vnode(f),f}function _(){return{current:null}}function g(n){return n.children}function b(n,l){this.props=n,this.context=l}function m(n,l){if(null==l)return n.__?m(n.__,n.__i+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?m(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function w(n){(!n.__d&&(n.__d=!0)&&i.push(n)&&!x.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||r)(x)}function x(){var n,u,t,o,r,e,c,s,a;for(i.sort(f);n=i.shift();)n.__d&&(u=i.length,o=void 0,e=(r=(t=n).__v).__e,s=[],a=[],(c=t.__P)&&((o=v({},r)).__v=r.__v+1,l.vnode&&l.vnode(o),L(c,o,r,t.__n,void 0!==c.ownerSVGElement,32&r.__u?[e]:null,s,null==e?m(r):e,!!(32&r.__u),a),o.__.__k[o.__i]=o,M(s,o,a),o.__e!=e&&k(o)),i.length>u&&i.sort(f));x.__r=0}function C(n,l,u,t,i,o,r,f,e,a,h){var v,p,y,d,_,g=t&&t.__k||s,b=l.length;for(u.__d=e,P(u,l,g),e=u.__d,v=0;v<b;v++)null!=(y=u.__k[v])&&\"boolean\"!=typeof y&&\"function\"!=typeof y&&(p=-1===y.__i?c:g[y.__i]||c,y.__i=v,L(n,y,p,i,o,r,f,e,a,h),d=y.__e,y.ref&&p.ref!=y.ref&&(p.ref&&z(p.ref,null,y),h.push(y.ref,y.__c||d,y)),null==_&&null!=d&&(_=d),65536&y.__u||p.__k===y.__k?e=S(y,e,n):\"function\"==typeof y.type&&void 0!==y.__d?e=y.__d:d&&(e=d.nextSibling),y.__d=void 0,y.__u&=-196609);u.__d=e,u.__e=_}function P(n,l,u){var t,i,o,r,f,e=l.length,c=u.length,s=c,a=0;for(n.__k=[],t=0;t<e;t++)null!=(i=n.__k[t]=null==(i=l[t])||\"boolean\"==typeof i||\"function\"==typeof i?null:\"string\"==typeof i||\"number\"==typeof i||\"bigint\"==typeof i||i.constructor==String?d(null,i,null,null,i):h(i)?d(g,{children:i},null,null,null):void 0===i.constructor&&i.__b>0?d(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i)?(i.__=n,i.__b=n.__b+1,f=H(i,u,r=t+a,s),i.__i=f,o=null,-1!==f&&(s--,(o=u[f])&&(o.__u|=131072)),null==o||null===o.__v?(-1==f&&a--,\"function\"!=typeof i.type&&(i.__u|=65536)):f!==r&&(f===r+1?a++:f>r?s>e-r?a+=f-r:a--:a=f<r&&f==r-1?f-r:0,f!==t+a&&(i.__u|=65536))):(o=u[t])&&null==o.key&&o.__e&&(o.__e==n.__d&&(n.__d=m(o)),N(o,o,!1),u[t]=null,s--);if(s)for(t=0;t<c;t++)null!=(o=u[t])&&0==(131072&o.__u)&&(o.__e==n.__d&&(n.__d=m(o)),N(o,o))}function S(n,l,u){var t,i;if(\"function\"==typeof n.type){for(t=n.__k,i=0;t&&i<t.length;i++)t[i]&&(t[i].__=n,l=S(t[i],l,u));return l}return n.__e!=l&&(u.insertBefore(n.__e,l||null),l=n.__e),l&&l.nextSibling}function $(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(h(n)?n.some(function(n){$(n,l)}):l.push(n)),l}function H(n,l,u,t){var i=n.key,o=n.type,r=u-1,f=u+1,e=l[u];if(null===e||e&&i==e.key&&o===e.type)return u;if(t>(null!=e&&0==(131072&e.__u)?1:0))for(;r>=0||f<l.length;){if(r>=0){if((e=l[r])&&0==(131072&e.__u)&&i==e.key&&o===e.type)return r;r--}if(f<l.length){if((e=l[f])&&0==(131072&e.__u)&&i==e.key&&o===e.type)return f;f++}}return-1}function I(n,l,u){\"-\"===l[0]?n.setProperty(l,null==u?\"\":u):n[l]=null==u?\"\":\"number\"!=typeof u||a.test(l)?u:u+\"px\"}function T(n,l,u,t,i){var o;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof t&&(n.style.cssText=t=\"\"),t)for(l in t)u&&l in u||I(n.style,l,\"\");if(u)for(l in u)t&&u[l]===t[l]||I(n.style,l,u[l])}else if(\"o\"===l[0]&&\"n\"===l[1])o=l!==(l=l.replace(/(PointerCapture)$|Capture$/,\"$1\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?t?u.u=t.u:(u.u=Date.now(),n.addEventListener(l,o?D:A,o)):n.removeEventListener(l,o?D:A,o);else{if(i)l=l.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(\"width\"!==l&&\"height\"!==l&&\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&\"rowSpan\"!==l&&\"colSpan\"!==l&&\"role\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null==u||!1===u&&\"-\"!==l[4]?n.removeAttribute(l):n.setAttribute(l,u))}}function A(n){var u=this.l[n.type+!1];if(n.t){if(n.t<=u.u)return}else n.t=Date.now();return u(l.event?l.event(n):n)}function D(n){return this.l[n.type+!0](l.event?l.event(n):n)}function L(n,u,t,i,o,r,f,e,c,s){var a,p,y,d,_,m,k,w,x,P,S,$,H,I,T,A=u.type;if(void 0!==u.constructor)return null;128&t.__u&&(c=!!(32&t.__u),r=[e=u.__e=t.__e]),(a=l.__b)&&a(u);n:if(\"function\"==typeof A)try{if(w=u.props,x=(a=A.contextType)&&i[a.__c],P=a?x?x.props.value:a.__:i,t.__c?k=(p=u.__c=t.__c).__=p.__E:(\"prototype\"in A&&A.prototype.render?u.__c=p=new A(w,P):(u.__c=p=new b(w,P),p.constructor=A,p.render=O),x&&x.sub(p),p.props=w,p.state||(p.state={}),p.context=P,p.__n=i,y=p.__d=!0,p.__h=[],p._sb=[]),null==p.__s&&(p.__s=p.state),null!=A.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=v({},p.__s)),v(p.__s,A.getDerivedStateFromProps(w,p.__s))),d=p.props,_=p.state,p.__v=u,y)null==A.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==A.getDerivedStateFromProps&&w!==d&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(w,P),!p.__e&&(null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(w,p.__s,P)||u.__v===t.__v)){for(u.__v!==t.__v&&(p.props=w,p.state=p.__s,p.__d=!1),u.__e=t.__e,u.__k=t.__k,u.__k.forEach(function(n){n&&(n.__=u)}),S=0;S<p._sb.length;S++)p.__h.push(p._sb[S]);p._sb=[],p.__h.length&&f.push(p);break n}null!=p.componentWillUpdate&&p.componentWillUpdate(w,p.__s,P),null!=p.componentDidUpdate&&p.__h.push(function(){p.componentDidUpdate(d,_,m)})}if(p.context=P,p.props=w,p.__P=n,p.__e=!1,$=l.__r,H=0,\"prototype\"in A&&A.prototype.render){for(p.state=p.__s,p.__d=!1,$&&$(u),a=p.render(p.props,p.state,p.context),I=0;I<p._sb.length;I++)p.__h.push(p._sb[I]);p._sb=[]}else do{p.__d=!1,$&&$(u),a=p.render(p.props,p.state,p.context),p.state=p.__s}while(p.__d&&++H<25);p.state=p.__s,null!=p.getChildContext&&(i=v(v({},i),p.getChildContext())),y||null==p.getSnapshotBeforeUpdate||(m=p.getSnapshotBeforeUpdate(d,_)),C(n,h(T=null!=a&&a.type===g&&null==a.key?a.props.children:a)?T:[T],u,t,i,o,r,f,e,c,s),p.base=u.__e,u.__u&=-161,p.__h.length&&f.push(p),k&&(p.__E=p.__=null)}catch(n){u.__v=null,c||null!=r?(u.__e=e,u.__u|=c?160:32,r[r.indexOf(e)]=null):(u.__e=t.__e,u.__k=t.__k),l.__e(n,u,t)}else null==r&&u.__v===t.__v?(u.__k=t.__k,u.__e=t.__e):u.__e=j(t.__e,u,t,i,o,r,f,c,s);(a=l.diffed)&&a(u)}function M(n,u,t){u.__d=void 0;for(var i=0;i<t.length;i++)z(t[i],t[++i],t[++i]);l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function j(l,u,t,i,o,r,f,e,s){var a,v,y,d,_,g,b,k=t.props,w=u.props,x=u.type;if(\"svg\"===x&&(o=!0),null!=r)for(a=0;a<r.length;a++)if((_=r[a])&&\"setAttribute\"in _==!!x&&(x?_.localName===x:3===_.nodeType)){l=_,r[a]=null;break}if(null==l){if(null===x)return document.createTextNode(w);l=o?document.createElementNS(\"http://www.w3.org/2000/svg\",x):document.createElement(x,w.is&&w),r=null,e=!1}if(null===x)k===w||e&&l.data===w||(l.data=w);else{if(r=r&&n.call(l.childNodes),k=t.props||c,!e&&null!=r)for(k={},a=0;a<l.attributes.length;a++)k[(_=l.attributes[a]).name]=_.value;for(a in k)_=k[a],\"children\"==a||(\"dangerouslySetInnerHTML\"==a?y=_:\"key\"===a||a in w||T(l,a,null,_,o));for(a in w)_=w[a],\"children\"==a?d=_:\"dangerouslySetInnerHTML\"==a?v=_:\"value\"==a?g=_:\"checked\"==a?b=_:\"key\"===a||e&&\"function\"!=typeof _||k[a]===_||T(l,a,_,k[a],o);if(v)e||y&&(v.__html===y.__html||v.__html===l.innerHTML)||(l.innerHTML=v.__html),u.__k=[];else if(y&&(l.innerHTML=\"\"),C(l,h(d)?d:[d],u,t,i,o&&\"foreignObject\"!==x,r,f,r?r[0]:t.__k&&m(t,0),e,s),null!=r)for(a=r.length;a--;)null!=r[a]&&p(r[a]);e||(a=\"value\",void 0!==g&&(g!==l[a]||\"progress\"===x&&!g||\"option\"===x&&g!==k[a])&&T(l,a,g,k[a],!1),a=\"checked\",void 0!==b&&b!==l[a]&&T(l,a,b,k[a],!1))}return l}function z(n,u,t){try{\"function\"==typeof n?n(u):n.current=u}catch(n){l.__e(n,t)}}function N(n,u,t){var i,o;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||z(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(n){l.__e(n,u)}i.base=i.__P=null,n.__c=void 0}if(i=n.__k)for(o=0;o<i.length;o++)i[o]&&N(i[o],u,t||\"function\"!=typeof n.type);t||null==n.__e||p(n.__e),n.__=n.__e=n.__d=void 0}function O(n,l,u){return this.constructor(n,u)}function q(u,t,i){var o,r,f,e;l.__&&l.__(u,t),r=(o=\"function\"==typeof i)?null:i&&i.__k||t.__k,f=[],e=[],L(t,u=(!o&&i||t).__k=y(g,null,[u]),r||c,c,void 0!==t.ownerSVGElement,!o&&i?[i]:r?null:t.firstChild?n.call(t.childNodes):null,f,!o&&i?i:r?r.__e:t.firstChild,o,e),M(f,u,e)}function B(n,l){q(n,l,B)}function E(l,u,t){var i,o,r,f,e=v({},l.props);for(r in l.type&&l.type.defaultProps&&(f=l.type.defaultProps),u)\"key\"==r?i=u[r]:\"ref\"==r?o=u[r]:e[r]=void 0===u[r]&&void 0!==f?f[r]:u[r];return arguments.length>2&&(e.children=arguments.length>3?n.call(arguments,2):t),d(l.type,e,i||l.key,o||l.ref,null)}function F(n,l){var u={__c:l=\"__cC\"+e++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,t;return this.getChildContext||(u=[],(t={})[l]=this,this.getChildContext=function(){return t},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(function(n){n.__e=!0,w(n)})},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=s.slice,l={__e:function(n,l,u,t){for(var i,o,r;l=l.__;)if((i=l.__c)&&!i.__)try{if((o=i.constructor)&&null!=o.getDerivedStateFromError&&(i.setState(o.getDerivedStateFromError(n)),r=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(n,t||{}),r=i.__d),r)return i.__E=i}catch(l){n=l}throw n}},u=0,t=function(n){return null!=n&&null==n.constructor},b.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=v({},this.state),\"function\"==typeof n&&(n=n(v({},u),this.props)),n&&v(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),w(this))},b.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),w(this))},b.prototype.render=g,i=[],r=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,f=function(n,l){return n.__v.__b-l.__v.__b},x.__r=0,e=0;export{b as Component,g as Fragment,E as cloneElement,F as createContext,y as createElement,_ as createRef,y as h,B as hydrate,t as isValidElement,l as options,q as render,$ as toChildArray};\n//# sourceMappingURL=preact.module.js.map\n","import { PostHog } from '../../posthog-core'\nimport { Survey, SurveyAppearance, MultipleSurveyQuestion, SurveyQuestion } from '../../posthog-surveys-types'\nimport { window as _window, document as _document } from '../../utils/globals'\nimport { VNode, cloneElement, createContext } from 'preact'\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nexport const style = (appearance: SurveyAppearance | null) => {\n    const positions = {\n        left: 'left: 30px;',\n        right: 'right: 30px;',\n        center: `\n            left: 50%;\n            transform: translateX(-50%);\n          `,\n    }\n    return `\n          .survey-form, .thank-you-message {\n              position: fixed;\n              margin: 0px;\n              bottom: 0px;\n              color: black;\n              font-weight: normal;\n              font-family: -apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n              text-align: left;\n              max-width: ${parseInt(appearance?.maxWidth || '300')}px;\n              width: 100%;\n              z-index: ${parseInt(appearance?.zIndex || '99999')};\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              border-bottom: 0px;\n              ${positions[appearance?.position || 'right'] || 'right: 30px;'}\n              flex-direction: column;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              border-top-left-radius: 10px;\n              border-top-right-radius: 10px;\n              box-shadow: -6px 0 16px -8px rgb(0 0 0 / 8%), -9px 0 28px 0 rgb(0 0 0 / 5%), -12px 0 48px 16px rgb(0 0 0 / 3%);\n          }\n          \n          .survey-box, .thank-you-message-container {\n              padding: 20px 25px 10px;\n              display: flex;\n              flex-direction: column;\n              border-radius: 10px;\n          }\n\n          .thank-you-message {\n              text-align: center;\n          }\n\n          .form-submit[disabled] {\n              opacity: 0.6;\n              filter: grayscale(50%);\n              cursor: not-allowed;\n          }\n          .survey-form textarea {\n              color: #2d2d2d;\n              font-size: 14px;\n              font-family: -apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n              background: white;\n              color: black;\n              outline: none;\n              padding-left: 10px;\n              padding-right: 10px;\n              padding-top: 10px;\n              border-radius: 6px;\n              border-color: ${appearance?.borderColor || '#c9c6c6'};\n              margin-top: 14px;\n              width: 100%;\n              box-sizing: border-box;\n          }\n          .survey-box:has(.survey-question:empty):not(:has(.survey-question-description)) textarea {\n              margin-top: 0;\n          }\n          .form-submit {\n              box-sizing: border-box;\n              margin: 0;\n              font-family: inherit;\n              overflow: visible;\n              text-transform: none;\n              position: relative;\n              display: inline-block;\n              font-weight: 700;\n              white-space: nowrap;\n              text-align: center;\n              border: 1.5px solid transparent;\n              cursor: pointer;\n              user-select: none;\n              touch-action: manipulation;\n              padding: 12px;\n              font-size: 14px;\n              border-radius: 6px;\n              outline: 0;\n              background: ${appearance?.submitButtonColor || 'black'} !important;\n              text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);\n              box-shadow: 0 2px 0 rgba(0, 0, 0, 0.045);\n              width: 100%;\n          }\n          .form-cancel {\n              display: flex;\n              float: right;\n              border: none;\n              background: none;\n              cursor: pointer;\n          }\n          .cancel-btn-wrapper {\n              position: absolute;\n              width: 35px;\n              height: 35px;\n              border-radius: 100%;\n              top: 0;\n              right: 0;\n              transform: translate(50%, -50%);\n              background: white;\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              display: flex;\n              justify-content: center;\n              align-items: center;\n          }\n          .bolded { font-weight: 600; }\n          .buttons {\n              display: flex;\n              justify-content: center;\n          }\n          .footer-branding {\n              font-size: 11px;\n              margin-top: 10px;\n              text-align: center;\n              display: flex;\n              justify-content: center;\n              gap: 4px;\n              align-items: center;\n              font-weight: 500;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              text-decoration: none;\n              backgroundColor: ${appearance?.backgroundColor || '#eeeded'};\n              color: ${getContrastingTextColor(appearance?.backgroundColor || '#eeeded')};\n          }\n          .survey-question {\n              font-weight: 500;\n              font-size: 14px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .question-textarea-wrapper {\n              display: flex;\n              flex-direction: column;\n          }\n          .survey-question-description {\n              font-size: 13px;\n              padding-top: 5px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .ratings-number {\n              font-size: 16px;\n              font-weight: 600;\n              padding: 8px 0px;\n              border: none;\n          }\n          .ratings-number:hover {\n              cursor: pointer;\n          }\n          .rating-options {\n              margin-top: 14px;\n          }\n          .rating-options-number {\n              display: grid;\n              border-radius: 6px;\n              overflow: hidden;\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n          }\n          .rating-options-number > .ratings-number {\n              border-right: 1px solid ${appearance?.borderColor || '#c9c6c6'};\n          }\n          .rating-options-number > .ratings-number:last-of-type {\n              border-right: 0px;\n          }\n          .rating-options-number .rating-active {\n              background: ${appearance?.ratingButtonActiveColor || 'black'};\n          }\n          .rating-options-emoji {\n              display: flex;\n              justify-content: space-between;\n          }\n          .ratings-emoji {\n              font-size: 16px;\n              background-color: transparent;\n              border: none;\n              padding: 0px;\n          }\n          .ratings-emoji:hover {\n              cursor: pointer;\n          }\n          .ratings-emoji.rating-active svg {\n              fill: ${appearance?.ratingButtonActiveColor || 'black'};\n          }\n          .emoji-svg {\n              fill: '#939393';\n          }\n          .rating-text {\n              display: flex;\n              flex-direction: row;\n              font-size: 11px;\n              justify-content: space-between;\n              margin-top: 6px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              opacity: .60;\n          }\n          .multiple-choice-options {\n              margin-top: 13px;\n              font-size: 14px;\n          }\n          .survey-box:has(.survey-question:empty):not(:has(.survey-question-description)) .multiple-choice-options {\n              margin-top: 0;\n          }\n          .multiple-choice-options .choice-option {\n              display: flex;\n              align-items: center;\n              gap: 4px;\n              font-size: 13px;\n              cursor: pointer;\n              margin-bottom: 5px;\n              position: relative;\n          }\n          .multiple-choice-options > .choice-option:last-of-type {\n              margin-bottom: 0px;\n          }\n          .multiple-choice-options input {\n              cursor: pointer;\n              position: absolute;\n              opacity: 0;\n          }\n          .choice-check {\n              position: absolute;\n              right: 10px;\n              background: white;\n          }\n          .choice-check svg {\n              display: none;\n          }\n          .multiple-choice-options .choice-option:hover .choice-check svg {\n              display: inline-block;\n              opacity: .25;\n          }\n          .multiple-choice-options input:checked + label + .choice-check svg {\n              display: inline-block;\n              opacity: 100% !important;\n          }\n          .multiple-choice-options input:checked + label {\n              font-weight: bold;\n              border: 1.5px solid rgba(0,0,0);\n          }\n          .multiple-choice-options input:checked + label input {\n              font-weight: bold;\n          }\n          .multiple-choice-options label {\n              width: 100%;\n              cursor: pointer;\n              padding: 10px;\n              border: 1.5px solid rgba(0,0,0,.25);\n              border-radius: 4px;\n              background: white;\n          }\n          .multiple-choice-options .choice-option-open label {\n              padding-right: 30px;\n              display: flex;\n              flex-wrap: wrap;\n              gap: 8px;\n              max-width: 100%;\n          }\n          .multiple-choice-options .choice-option-open label span {\n              width: 100%;\n          }\n          .multiple-choice-options .choice-option-open input:disabled + label {\n              opacity: 0.6;\n          }\n          .multiple-choice-options .choice-option-open label input {\n              position: relative;\n              opacity: 1;\n              flex-grow: 1;\n              border: 0;\n              outline: 0;\n          }\n          .thank-you-message-body {\n              margin-top: 6px;\n              font-size: 14px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .thank-you-message-header {\n              margin: 10px 0px 0px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .thank-you-message-container .form-submit {\n              margin-top: 20px;\n              margin-bottom: 10px;\n          }\n          .thank-you-message-countdown {\n              margin-left: 6px;\n          }\n          .bottom-section {\n              margin-top: 14px;\n          }\n          `\n}\n\nfunction nameToHex(name: string) {\n    return {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        'indianred ': '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrodyellow: '#fafad2',\n        lightgrey: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370d8',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#d87093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32',\n    }[name.toLowerCase()]\n}\n\nfunction hex2rgb(c: string) {\n    if (c[0] === '#') {\n        const hexColor = c.replace(/^#/, '')\n        const r = parseInt(hexColor.slice(0, 2), 16)\n        const g = parseInt(hexColor.slice(2, 4), 16)\n        const b = parseInt(hexColor.slice(4, 6), 16)\n        return 'rgb(' + r + ',' + g + ',' + b + ')'\n    }\n    return 'rgb(255, 255, 255)'\n}\n\nexport function getContrastingTextColor(color: string = defaultBackgroundColor) {\n    let rgb\n    if (color[0] === '#') {\n        rgb = hex2rgb(color)\n    }\n    if (color.startsWith('rgb')) {\n        rgb = color\n    }\n    // otherwise it's a color name\n    const nameColorToHex = nameToHex(color)\n    if (nameColorToHex) {\n        rgb = hex2rgb(nameColorToHex)\n    }\n    if (!rgb) {\n        return 'black'\n    }\n    const colorMatch = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)\n    if (colorMatch) {\n        const r = parseInt(colorMatch[1])\n        const g = parseInt(colorMatch[2])\n        const b = parseInt(colorMatch[3])\n        const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b))\n        return hsp > 127.5 ? 'black' : 'white'\n    }\n    return 'black'\n}\nexport function getTextColor(el: HTMLElement) {\n    const backgroundColor = window.getComputedStyle(el).backgroundColor\n    if (backgroundColor === 'rgba(0, 0, 0, 0)') {\n        return 'black'\n    }\n    const colorMatch = backgroundColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)\n    if (!colorMatch) return 'black'\n\n    const r = parseInt(colorMatch[1])\n    const g = parseInt(colorMatch[2])\n    const b = parseInt(colorMatch[3])\n    const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b))\n    return hsp > 127.5 ? 'black' : 'white'\n}\n\nexport const defaultSurveyAppearance: SurveyAppearance = {\n    backgroundColor: '#eeeded',\n    submitButtonColor: 'black',\n    submitButtonTextColor: 'white',\n    ratingButtonColor: 'white',\n    ratingButtonActiveColor: 'black',\n    borderColor: '#c9c6c6',\n    placeholder: 'Start typing...',\n    whiteLabel: false,\n    displayThankYouMessage: true,\n    thankYouMessageHeader: 'Thank you for your feedback!',\n    position: 'right',\n}\n\nexport const defaultBackgroundColor = '#eeeded'\n\nexport const createShadow = (styleSheet: string, surveyId: string, element?: Element) => {\n    const div = document.createElement('div')\n    div.className = `PostHogSurvey${surveyId}`\n    const shadow = div.attachShadow({ mode: 'open' })\n    if (styleSheet) {\n        const styleElement = Object.assign(document.createElement('style'), {\n            innerText: styleSheet,\n        })\n        shadow.appendChild(styleElement)\n    }\n    ;(element ? element : document.body).appendChild(div)\n    return shadow\n}\n\nexport const sendSurveyEvent = (\n    responses: Record<string, string | number | string[] | null> = {},\n    survey: Survey,\n    posthog?: PostHog\n) => {\n    if (!posthog) return\n    localStorage.setItem(getSurveySeenKey(survey), 'true')\n\n    posthog.capture('survey sent', {\n        $survey_name: survey.name,\n        $survey_id: survey.id,\n        $survey_iteration: survey.current_iteration,\n        $survey_iteration_start_date: survey.current_iteration_start_date,\n        $survey_questions: survey.questions.map((question) => question.question),\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        ...responses,\n        $set: {\n            [getSurveyInteractionProperty(survey, 'responded')]: true,\n        },\n    })\n    window.dispatchEvent(new Event('PHSurveySent'))\n}\n\nexport const dismissedSurveyEvent = (survey: Survey, posthog?: PostHog, readOnly?: boolean) => {\n    // TODO: state management and unit tests for this would be nice\n    if (readOnly || !posthog) {\n        return\n    }\n    posthog.capture('survey dismissed', {\n        $survey_name: survey.name,\n        $survey_id: survey.id,\n        $survey_iteration: survey.current_iteration,\n        $survey_iteration_start_date: survey.current_iteration_start_date,\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        $set: {\n            [getSurveyInteractionProperty(survey, 'dismissed')]: true,\n        },\n    })\n    localStorage.setItem(getSurveySeenKey(survey), 'true')\n    window.dispatchEvent(new Event('PHSurveyClosed'))\n}\n\n// Use the Fisher-yates algorithm to shuffle this array\n// https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\nexport const shuffle = (array: any[]) => {\n    return array\n        .map((a) => ({ sort: Math.floor(Math.random() * 10), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value)\n}\n\nconst reverseIfUnshuffled = (unshuffled: any[], shuffled: any[]): any[] => {\n    if (unshuffled.length === shuffled.length && unshuffled.every((val, index) => val === shuffled[index])) {\n        return shuffled.reverse()\n    }\n\n    return shuffled\n}\n\nexport const getDisplayOrderChoices = (question: MultipleSurveyQuestion): string[] => {\n    if (!question.shuffleOptions) {\n        return question.choices\n    }\n\n    const displayOrderChoices = question.choices\n    let openEndedChoice = ''\n    if (question.hasOpenChoice) {\n        // if the question has an open-ended choice, its always the last element in the choices array.\n        openEndedChoice = displayOrderChoices.pop()!\n    }\n\n    const shuffledOptions = reverseIfUnshuffled(displayOrderChoices, shuffle(displayOrderChoices))\n\n    if (question.hasOpenChoice) {\n        question.choices.push(openEndedChoice)\n        shuffledOptions.push(openEndedChoice)\n    }\n\n    return shuffledOptions\n}\n\nexport const getDisplayOrderQuestions = (survey: Survey): SurveyQuestion[] => {\n    // retain the original questionIndex so we can correlate values in the webapp\n    survey.questions.forEach((question, idx) => {\n        question.originalQuestionIndex = idx\n    })\n\n    if (!survey.appearance || !survey.appearance.shuffleQuestions) {\n        return survey.questions\n    }\n\n    return reverseIfUnshuffled(survey.questions, shuffle(survey.questions))\n}\n\nexport const hasEvents = (survey: Survey): boolean => {\n    return survey.conditions?.events?.values?.length != undefined && survey.conditions?.events?.values?.length > 0\n}\n\nexport const canActivateRepeatedly = (survey: Survey): boolean => {\n    return !!(survey.conditions?.events?.repeatedActivation && hasEvents(survey))\n}\n\n/**\n * getSurveySeen checks local storage for the surveySeen Key a\n * and overrides this value if the survey can be repeatedly activated by its events.\n * @param survey\n */\nexport const getSurveySeen = (survey: Survey): boolean => {\n    const surveySeen = localStorage.getItem(getSurveySeenKey(survey))\n    if (surveySeen) {\n        // if a survey has already been seen,\n        // we will override it with the event repeated activation value.\n        return !canActivateRepeatedly(survey)\n    }\n\n    return false\n}\n\nexport const getSurveySeenKey = (survey: Survey): string => {\n    let surveySeenKey = `seenSurvey_${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        surveySeenKey = `seenSurvey_${survey.id}_${survey.current_iteration}`\n    }\n\n    return surveySeenKey\n}\n\nconst getSurveyInteractionProperty = (survey: Survey, action: string): string => {\n    let surveyProperty = `$survey_${action}/${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        surveyProperty = `$survey_${action}/${survey.id}/${survey.current_iteration}`\n    }\n\n    return surveyProperty\n}\n\nexport const SurveyContext = createContext<{\n    isPreviewMode: boolean\n    previewPageIndex: number | undefined\n    handleCloseSurveyPopup: () => void\n    isPopup: boolean\n}>({\n    isPreviewMode: false,\n    previewPageIndex: 0,\n    handleCloseSurveyPopup: () => {},\n    isPopup: true,\n})\n\ninterface RenderProps {\n    component: VNode<{ className: string }>\n    children: string\n    renderAsHtml?: boolean\n    style?: React.CSSProperties\n}\n\nexport const renderChildrenAsTextOrHtml = ({ component, children, renderAsHtml, style }: RenderProps) => {\n    return renderAsHtml\n        ? cloneElement(component, {\n              dangerouslySetInnerHTML: { __html: children },\n              style,\n          })\n        : cloneElement(component, {\n              children,\n              style,\n          })\n}\n","import{options as n}from\"preact\";var t,r,u,i,o=0,f=[],c=[],e=n.__b,a=n.__r,v=n.diffed,l=n.__c,m=n.unmount;function d(t,u){n.__h&&n.__h(r,t,o||u),o=0;var i=r.__H||(r.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t]}function h(n){return o=1,s(B,n)}function s(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}))}],o.__c=r,!r.u)){var f=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return!n.__N}))return!c||c.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0)}}),!(!i&&o.__c.props===n)&&(!c||c.call(this,n,t,r))};r.u=!0;var c=r.shouldComponentUpdate,e=r.componentWillUpdate;r.componentWillUpdate=function(n,t,r){if(this.__e){var u=c;c=void 0,f(n,t,r),c=u}e&&e.call(this,n,t,r)},r.shouldComponentUpdate=f}return o.__N||o.__}function p(u,i){var o=d(t++,3);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__H.__h.push(o))}function y(u,i){var o=d(t++,4);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__h.push(o))}function _(n){return o=5,F(function(){return{current:n}},[])}function A(n,t,r){o=6,y(function(){return\"function\"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n))}function F(n,r){var u=d(t++,7);return z(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T(n,t){return o=8,F(function(){return n},t)}function q(n){var u=r.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function x(t,r){n.useDebugValue&&n.useDebugValue(r?r(t):t)}function P(n){var u=d(t++,10),i=h();return u.__=n,r.componentDidCatch||(r.componentDidCatch=function(n,t){u.__&&u.__(n,t),i[1](n)}),[i[0],function(){i[1](void 0)}]}function V(){var n=d(t++,11);if(!n.__){for(var u=r.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__=\"P\"+i[0]+\"-\"+i[1]++}return n.__}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k),t.__H.__h.forEach(w),t.__H.__h=[]}catch(r){t.__H.__h=[],n.__e(r,t.__v)}}n.__b=function(n){r=null,e&&e(n)},n.__r=function(n){a&&a(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0})):(i.__h.forEach(k),i.__h.forEach(w),i.__h=[],t=0)),u=r},n.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===n.requestAnimationFrame||((i=n.requestAnimationFrame)||j)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c})),u=r=null},n.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k),t.__h=t.__h.filter(function(n){return!n.__||w(n)})}catch(u){r.some(function(n){n.__h&&(n.__h=[])}),r=[],n.__e(u,t.__v)}}),l&&l(t,r)},n.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k(n)}catch(n){r=n}}),u.__H=void 0,r&&n.__e(r,u.__v))};var g=\"function\"==typeof requestAnimationFrame;function j(n){var t,r=function(){clearTimeout(u),g&&cancelAnimationFrame(t),setTimeout(n)},u=setTimeout(r,100);g&&(t=requestAnimationFrame(r))}function k(n){var t=r,u=n.__c;\"function\"==typeof u&&(n.__c=void 0,u()),r=t}function w(n){var t=r;n.__c=n.__(),r=t}function z(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B(n,t){return\"function\"==typeof t?t(n):t}export{T as useCallback,q as useContext,x as useDebugValue,p as useEffect,P as useErrorBoundary,V as useId,A as useImperativeHandle,y as useLayoutEffect,F as useMemo,s as useReducer,_ as useRef,h as useState};\n//# sourceMappingURL=hooks.module.js.map\n","// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\nexport const isUint8Array = function (x: unknown): x is Uint8Array {\n    return toString.call(x) === '[object Uint8Array]'\n}\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const isFunction = function (f: any): f is (...args: any[]) => any {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof f === 'function'\n}\n// Underscore Addons\nexport const isObject = function (x: unknown): x is Record<string, any> {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !isArray(x)\n}\nexport const isEmptyObject = function (x: unknown): x is Record<string, any> {\n    if (isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const isUndefined = function (x: unknown): x is undefined {\n    return x === void 0\n}\n\nexport const isString = function (x: unknown): x is string {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const isEmptyString = function (x: unknown): boolean {\n    return isString(x) && x.trim().length === 0\n}\n\nexport const isNull = function (x: unknown): x is null {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\n\n/*\n    sometimes you want to check if something is null or undefined\n    that's what this is for\n */\nexport const isNullish = function (x: unknown): x is null | undefined {\n    return isUndefined(x) || isNull(x)\n}\n\nexport const isDate = function (x: unknown): x is Date {\n    // eslint-disable-next-line posthog-js/no-direct-date-check\n    return toString.call(x) == '[object Date]'\n}\nexport const isNumber = function (x: unknown): x is number {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const isBoolean = function (x: unknown): x is boolean {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n\nexport const isDocument = (x: unknown): x is Document => {\n    // eslint-disable-next-line posthog-js/no-direct-document-check\n    return x instanceof Document\n}\n\nexport const isFormData = (x: unknown): x is FormData => {\n    // eslint-disable-next-line posthog-js/no-direct-form-data-check\n    return x instanceof FormData\n}\n\nexport const isFile = (x: unknown): x is File => {\n    // eslint-disable-next-line posthog-js/no-direct-file-check\n    return x instanceof File\n}\n","export const satisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146 272q66 0 121.5-35.5T682-393h-52q-23 40-63 61.5T480.5-310q-46.5 0-87-21T331-393h-53q26 61 81 96.5T480-261Zm0 181q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const neutralEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm20 194h253v-49H354v49ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const dissatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146.174 116Q413-417 358.5-379.5T278-280h53q22-42 62.173-65t87.5-23Q528-368 567.5-344.5T630-280h52q-25-63-79.826-100-54.826-37-122-37ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const veryDissatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M480-417q-67 0-121.5 37.5T278-280h404q-25-63-80-100t-122-37Zm-183-72 50-45 45 45 31-36-45-45 45-45-31-36-45 45-50-45-31 36 45 45-45 45 31 36Zm272 0 44-45 51 45 31-36-45-45 45-45-31-36-51 45-44-45-31 36 44 45-44 45 31 36ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142 0 241-99t99-241q0-142-99-241t-241-99q-142 0-241 99t-99 241q0 142 99 241t241 99Z\" />\n    </svg>\n)\nexport const verySatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M479.504-261Q537-261 585.5-287q48.5-26 78.5-72.4 6-11.6-.75-22.6-6.75-11-20.25-11H316.918Q303-393 296.5-382t-.5 22.6q30 46.4 78.5 72.4 48.5 26 105.004 26ZM347-578l27 27q7.636 8 17.818 8Q402-543 410-551q8-8 8-18t-8-18l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.636-8 17.818Q276-559 284-551q8 8 18 8t18-8l27-27Zm267 0 27 27q7.714 8 18 8t18-8q8-7.636 8-17.818Q685-579 677-587l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.714-8 18t8 18q7.636 8 17.818 8Q579-543 587-551l27-27ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const cancelSVG = (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M0.164752 0.164752C0.384422 -0.0549175 0.740578 -0.0549175 0.960248 0.164752L6 5.20451L11.0398 0.164752C11.2594 -0.0549175 11.6156 -0.0549175 11.8352 0.164752C12.0549 0.384422 12.0549 0.740578 11.8352 0.960248L6.79549 6L11.8352 11.0398C12.0549 11.2594 12.0549 11.6156 11.8352 11.8352C11.6156 12.0549 11.2594 12.0549 11.0398 11.8352L6 6.79549L0.960248 11.8352C0.740578 12.0549 0.384422 12.0549 0.164752 11.8352C-0.0549175 11.6156 -0.0549175 11.2594 0.164752 11.0398L5.20451 6L0.164752 0.960248C-0.0549175 0.740578 -0.0549175 0.384422 0.164752 0.164752Z\"\n            fill=\"black\"\n        />\n    </svg>\n)\nexport const IconPosthogLogo = (\n    <svg width=\"77\" height=\"14\" viewBox=\"0 0 77 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0_2415_6911)\">\n            <mask\n                id=\"mask0_2415_6911\"\n                style={{ maskType: 'luminance' }}\n                maskUnits=\"userSpaceOnUse\"\n                x=\"0\"\n                y=\"0\"\n                width=\"77\"\n                height=\"14\"\n            >\n                <path d=\"M0.5 0H76.5V14H0.5V0Z\" fill=\"white\" />\n            </mask>\n            <g mask=\"url(#mask0_2415_6911)\">\n                <path\n                    d=\"M5.77226 8.02931C5.59388 8.37329 5.08474 8.37329 4.90634 8.02931L4.4797 7.20672C4.41155 7.07535 4.41155 6.9207 4.4797 6.78933L4.90634 5.96669C5.08474 5.62276 5.59388 5.62276 5.77226 5.96669L6.19893 6.78933C6.26709 6.9207 6.26709 7.07535 6.19893 7.20672L5.77226 8.02931ZM5.77226 12.6946C5.59388 13.0386 5.08474 13.0386 4.90634 12.6946L4.4797 11.872C4.41155 11.7406 4.41155 11.586 4.4797 11.4546L4.90634 10.632C5.08474 10.288 5.59388 10.288 5.77226 10.632L6.19893 11.4546C6.26709 11.586 6.26709 11.7406 6.19893 11.872L5.77226 12.6946Z\"\n                    fill=\"#1D4AFF\"\n                />\n                <path\n                    d=\"M0.5 10.9238C0.5 10.508 1.02142 10.2998 1.32637 10.5938L3.54508 12.7327C3.85003 13.0267 3.63405 13.5294 3.20279 13.5294H0.984076C0.716728 13.5294 0.5 13.3205 0.5 13.0627V10.9238ZM0.5 8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.19753 13.3927C5.28831 13.4802 5.41144 13.5294 5.53982 13.5294H8.0421C8.47337 13.5294 8.68936 13.0267 8.3844 12.7327L1.32637 5.92856C1.02142 5.63456 0.5 5.84278 0.5 6.25854V8.67083ZM0.5 4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L10.0368 13.3927C10.1276 13.4802 10.2508 13.5294 10.3791 13.5294H12.8814C13.3127 13.5294 13.5287 13.0267 13.2237 12.7327L1.32637 1.26329C1.02142 0.969312 0.5 1.17752 0.5 1.59327V4.00556ZM5.33931 4.00556C5.33931 4.12932 5.39033 4.24802 5.4811 4.33554L14.1916 12.7327C14.4965 13.0267 15.0179 12.8185 15.0179 12.4028V9.99047C15.0179 9.86671 14.9669 9.74799 14.8762 9.66049L6.16568 1.26329C5.86071 0.969307 5.33931 1.17752 5.33931 1.59327V4.00556ZM11.005 1.26329C10.7 0.969307 10.1786 1.17752 10.1786 1.59327V4.00556C10.1786 4.12932 10.2296 4.24802 10.3204 4.33554L14.1916 8.06748C14.4965 8.36148 15.0179 8.15325 15.0179 7.7375V5.3252C15.0179 5.20144 14.9669 5.08272 14.8762 4.99522L11.005 1.26329Z\"\n                    fill=\"#F9BD2B\"\n                />\n                <path\n                    d=\"M21.0852 10.981L16.5288 6.58843C16.2238 6.29443 15.7024 6.50266 15.7024 6.91841V13.0627C15.7024 13.3205 15.9191 13.5294 16.1865 13.5294H23.2446C23.5119 13.5294 23.7287 13.3205 23.7287 13.0627V12.5032C23.7287 12.2455 23.511 12.0396 23.2459 12.0063C22.4323 11.9042 21.6713 11.546 21.0852 10.981ZM18.0252 12.0365C17.5978 12.0365 17.251 11.7021 17.251 11.2901C17.251 10.878 17.5978 10.5436 18.0252 10.5436C18.4527 10.5436 18.7996 10.878 18.7996 11.2901C18.7996 11.7021 18.4527 12.0365 18.0252 12.0365Z\"\n                    fill=\"currentColor\"\n                />\n                <path\n                    d=\"M0.5 13.0627C0.5 13.3205 0.716728 13.5294 0.984076 13.5294H3.20279C3.63405 13.5294 3.85003 13.0267 3.54508 12.7327L1.32637 10.5938C1.02142 10.2998 0.5 10.508 0.5 10.9238V13.0627ZM5.33931 5.13191L1.32637 1.26329C1.02142 0.969306 0.5 1.17752 0.5 1.59327V4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L5.33931 8.86412V5.13191ZM1.32637 5.92855C1.02142 5.63455 0.5 5.84278 0.5 6.25853V8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.33931 13.5294V9.79717L1.32637 5.92855Z\"\n                    fill=\"#1D4AFF\"\n                />\n                <path\n                    d=\"M10.1787 5.3252C10.1787 5.20144 10.1277 5.08272 10.0369 4.99522L6.16572 1.26329C5.8608 0.969306 5.33936 1.17752 5.33936 1.59327V4.00556C5.33936 4.12932 5.39037 4.24802 5.48114 4.33554L10.1787 8.86412V5.3252ZM5.33936 13.5294H8.04214C8.47341 13.5294 8.6894 13.0267 8.38443 12.7327L5.33936 9.79717V13.5294ZM5.33936 5.13191V8.67083C5.33936 8.79459 5.39037 8.91331 5.48114 9.00081L10.1787 13.5294V9.99047C10.1787 9.86671 10.1277 9.74803 10.0369 9.66049L5.33936 5.13191Z\"\n                    fill=\"#F54E00\"\n                />\n                <path\n                    d=\"M29.375 11.6667H31.3636V8.48772H33.0249C34.8499 8.48772 36.0204 7.4443 36.0204 5.83052C36.0204 4.21681 34.8499 3.17334 33.0249 3.17334H29.375V11.6667ZM31.3636 6.84972V4.81136H32.8236C33.5787 4.81136 34.0318 5.19958 34.0318 5.83052C34.0318 6.4615 33.5787 6.84972 32.8236 6.84972H31.3636ZM39.618 11.7637C41.5563 11.7637 42.9659 10.429 42.9659 8.60905C42.9659 6.78905 41.5563 5.45438 39.618 5.45438C37.6546 5.45438 36.2701 6.78905 36.2701 8.60905C36.2701 10.429 37.6546 11.7637 39.618 11.7637ZM38.1077 8.60905C38.1077 7.63838 38.7118 6.97105 39.618 6.97105C40.5116 6.97105 41.1157 7.63838 41.1157 8.60905C41.1157 9.57972 40.5116 10.2471 39.618 10.2471C38.7118 10.2471 38.1077 9.57972 38.1077 8.60905ZM46.1482 11.7637C47.6333 11.7637 48.6402 10.8658 48.6402 9.81025C48.6402 7.33505 45.2294 8.13585 45.2294 7.16518C45.2294 6.8983 45.5189 6.72843 45.9342 6.72843C46.3622 6.72843 46.8782 6.98318 47.0418 7.54132L48.527 6.94678C48.2375 6.06105 47.1677 5.45438 45.8713 5.45438C44.4743 5.45438 43.6058 6.25518 43.6058 7.21372C43.6058 9.53118 46.9663 8.88812 46.9663 9.84665C46.9663 10.1864 46.6391 10.417 46.1482 10.417C45.4434 10.417 44.9525 9.94376 44.8015 9.3735L43.3164 9.93158C43.6436 10.8537 44.6001 11.7637 46.1482 11.7637ZM53.4241 11.606L53.2982 10.0651C53.0843 10.1743 52.8074 10.2106 52.5808 10.2106C52.1278 10.2106 51.8257 9.89523 51.8257 9.34918V7.03172H53.3612V5.55145H51.8257V3.78001H49.9755V5.55145H48.9687V7.03172H49.9755V9.57972C49.9755 11.06 51.0202 11.7637 52.3921 11.7637C52.7696 11.7637 53.122 11.7031 53.4241 11.606ZM59.8749 3.17334V6.47358H56.376V3.17334H54.3874V11.6667H56.376V8.11158H59.8749V11.6667H61.8761V3.17334H59.8749ZM66.2899 11.7637C68.2281 11.7637 69.6378 10.429 69.6378 8.60905C69.6378 6.78905 68.2281 5.45438 66.2899 5.45438C64.3265 5.45438 62.942 6.78905 62.942 8.60905C62.942 10.429 64.3265 11.7637 66.2899 11.7637ZM64.7796 8.60905C64.7796 7.63838 65.3837 6.97105 66.2899 6.97105C67.1835 6.97105 67.7876 7.63838 67.7876 8.60905C67.7876 9.57972 67.1835 10.2471 66.2899 10.2471C65.3837 10.2471 64.7796 9.57972 64.7796 8.60905ZM73.2088 11.4725C73.901 11.4725 74.5177 11.242 74.845 10.8416V11.424C74.845 12.1034 74.2786 12.5767 73.4102 12.5767C72.7935 12.5767 72.2523 12.2854 72.1642 11.788L70.4776 12.0428C70.7042 13.1955 71.925 13.972 73.4102 13.972C75.361 13.972 76.6574 12.8679 76.6574 11.2298V5.55145H74.8324V6.07318C74.4926 5.69705 73.9136 5.45438 73.171 5.45438C71.409 5.45438 70.3014 6.61918 70.3014 8.46345C70.3014 10.3077 71.409 11.4725 73.2088 11.4725ZM72.1012 8.46345C72.1012 7.55345 72.655 6.97105 73.5109 6.97105C74.3793 6.97105 74.9331 7.55345 74.9331 8.46345C74.9331 9.37345 74.3793 9.95585 73.5109 9.95585C72.655 9.95585 72.1012 9.37345 72.1012 8.46345Z\"\n                    fill=\"currentColor\"\n                />\n            </g>\n        </g>\n        <defs>\n            <clipPath id=\"clip0_2415_6911\">\n                <rect width=\"76\" height=\"14\" fill=\"white\" transform=\"translate(0.5)\" />\n            </clipPath>\n        </defs>\n    </svg>\n)\nexport const checkSVG = (\n    <svg width=\"16\" height=\"12\" viewBox=\"0 0 16 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.30769 10.6923L4.77736 11.2226C4.91801 11.3633 5.10878 11.4423 5.30769 11.4423C5.5066 11.4423 5.69737 11.3633 5.83802 11.2226L5.30769 10.6923ZM15.5303 1.53033C15.8232 1.23744 15.8232 0.762563 15.5303 0.46967C15.2374 0.176777 14.7626 0.176777 14.4697 0.46967L15.5303 1.53033ZM1.53033 5.85429C1.23744 5.56139 0.762563 5.56139 0.46967 5.85429C0.176777 6.14718 0.176777 6.62205 0.46967 6.91495L1.53033 5.85429ZM5.83802 11.2226L15.5303 1.53033L14.4697 0.46967L4.77736 10.162L5.83802 11.2226ZM0.46967 6.91495L4.77736 11.2226L5.83802 10.162L1.53033 5.85429L0.46967 6.91495Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n)\n","import { IconPosthogLogo } from '../icons'\n// import { getContrastingTextColor } from '../surveys-utils'\n\nexport function PostHogLogo() {\n    // const textColor = getContrastingTextColor(backgroundColor)\n\n    return (\n        <a\n            href=\"https://posthog.com\"\n            target=\"_blank\"\n            rel=\"noopener\"\n            // style={{ backgroundColor: backgroundColor, color: textColor }}\n            className=\"footer-branding\"\n        >\n            Survey by {IconPosthogLogo}\n        </a>\n    )\n}\n","import { window } from '../../../utils/globals'\n\nimport { SurveyAppearance } from '../../../posthog-surveys-types'\n\nimport { PostHogLogo } from './PostHogLogo'\nimport { useContext } from 'preact/hooks'\nimport { SurveyContext, defaultSurveyAppearance, getContrastingTextColor } from '../surveys-utils'\n\nexport function BottomSection({\n    text,\n    submitDisabled,\n    appearance,\n    onSubmit,\n    link,\n}: {\n    text: string\n    submitDisabled: boolean\n    appearance: SurveyAppearance\n    onSubmit: () => void\n    link?: string | null\n}) {\n    const { isPreviewMode, isPopup } = useContext(SurveyContext)\n    const textColor =\n        appearance.submitButtonTextColor ||\n        getContrastingTextColor(appearance.submitButtonColor || defaultSurveyAppearance.submitButtonColor)\n    return (\n        <div className=\"bottom-section\">\n            <div className=\"buttons\">\n                <button\n                    className=\"form-submit\"\n                    disabled={submitDisabled && !isPreviewMode}\n                    type=\"button\"\n                    style={isPopup ? { color: textColor } : {}}\n                    onClick={() => {\n                        if (isPreviewMode) return\n                        if (link) {\n                            window?.open(link)\n                        }\n                        onSubmit()\n                    }}\n                >\n                    {text}\n                </button>\n            </div>\n            {!appearance.whiteLabel && <PostHogLogo />}\n        </div>\n    )\n}\n","import { SurveyContext, defaultSurveyAppearance, renderChildrenAsTextOrHtml } from '../surveys-utils'\nimport { cancelSVG } from '../icons'\nimport { useContext } from 'preact/hooks'\nimport { SurveyQuestionDescriptionContentType } from '../../../posthog-surveys-types'\nimport { h } from 'preact'\n\nexport function QuestionHeader({\n    question,\n    description,\n    descriptionContentType,\n    backgroundColor,\n    forceDisableHtml,\n}: {\n    question: string\n    description?: string | null\n    descriptionContentType?: SurveyQuestionDescriptionContentType\n    forceDisableHtml: boolean\n    backgroundColor?: string\n}) {\n    const { isPopup } = useContext(SurveyContext)\n    return (\n        <div style={isPopup ? { backgroundColor: backgroundColor || defaultSurveyAppearance.backgroundColor } : {}}>\n            <div className=\"survey-question\">{question}</div>\n            {description &&\n                renderChildrenAsTextOrHtml({\n                    component: h('div', { className: 'survey-question-description' }),\n                    children: description,\n                    renderAsHtml: !forceDisableHtml && descriptionContentType !== 'text',\n                })}\n        </div>\n    )\n}\n\nexport function Cancel({ onClick }: { onClick: () => void }) {\n    const { isPreviewMode } = useContext(SurveyContext)\n\n    return (\n        <div className=\"cancel-btn-wrapper\">\n            <button className=\"form-cancel\" onClick={onClick} disabled={isPreviewMode}>\n                {cancelSVG}\n            </button>\n        </div>\n    )\n}\n","import { BottomSection } from './BottomSection'\nimport { Cancel } from './QuestionHeader'\nimport { SurveyAppearance, SurveyQuestionDescriptionContentType } from '../../../posthog-surveys-types'\nimport { defaultSurveyAppearance, getContrastingTextColor, renderChildrenAsTextOrHtml } from '../surveys-utils'\nimport { h } from 'preact'\n\nimport { useContext } from 'preact/hooks'\nimport { SurveyContext } from '../../surveys/surveys-utils'\n\nexport function ConfirmationMessage({\n    header,\n    description,\n    contentType,\n    forceDisableHtml,\n    appearance,\n    onClose,\n    styleOverrides,\n}: {\n    header: string\n    description: string\n    forceDisableHtml: boolean\n    contentType?: SurveyQuestionDescriptionContentType\n    appearance: SurveyAppearance\n    onClose: () => void\n    styleOverrides?: React.CSSProperties\n}) {\n    const textColor = getContrastingTextColor(appearance.backgroundColor || defaultSurveyAppearance.backgroundColor)\n\n    const { isPopup } = useContext(SurveyContext)\n\n    return (\n        <>\n            <div className=\"thank-you-message\" style={{ ...styleOverrides }}>\n                <div className=\"thank-you-message-container\">\n                    {isPopup && <Cancel onClick={() => onClose()} />}\n                    <h3 className=\"thank-you-message-header\" style={{ color: textColor }}>\n                        {header}\n                    </h3>\n                    {description &&\n                        renderChildrenAsTextOrHtml({\n                            component: h('div', { className: 'thank-you-message-body' }),\n                            children: description,\n                            renderAsHtml: !forceDisableHtml && contentType !== 'text',\n                            style: { color: textColor },\n                        })}\n                    {isPopup && (\n                        <BottomSection\n                            text={appearance.thankYouMessageCloseButtonText || 'Close'}\n                            submitDisabled={false}\n                            appearance={appearance}\n                            onSubmit={() => onClose()}\n                        />\n                    )}\n                </div>\n            </div>\n        </>\n    )\n}\n","import { useEffect, useRef, useState } from 'preact/hooks'\nimport { SurveyAppearance } from '../../../posthog-surveys-types'\nimport * as Preact from 'preact'\nimport { getTextColor } from '../surveys-utils'\n\nexport function useContrastingTextColor(options: {\n    appearance: SurveyAppearance\n    defaultTextColor?: string\n    forceUpdate?: boolean\n}): {\n    ref: Preact.RefObject<HTMLElement>\n    textColor: string\n} {\n    const ref = useRef<HTMLElement>(null)\n    const [textColor, setTextColor] = useState(options.defaultTextColor ?? 'black')\n\n    // TODO: useContext to get the background colors instead of querying the DOM\n    useEffect(() => {\n        if (ref.current) {\n            const color = getTextColor(ref.current)\n            setTextColor(color)\n        }\n    }, [options.appearance, options.forceUpdate])\n\n    return {\n        ref,\n        textColor,\n    }\n}\n","import {\n    BasicSurveyQuestion,\n    SurveyAppearance,\n    LinkSurveyQuestion,\n    RatingSurveyQuestion,\n    MultipleSurveyQuestion,\n    SurveyQuestionType,\n} from '../../../posthog-surveys-types'\nimport { RefObject } from 'preact'\nimport { useRef, useState, useMemo } from 'preact/hooks'\nimport { isNull, isArray } from '../../../utils/type-utils'\nimport { useContrastingTextColor } from '../hooks/useContrastingTextColor'\nimport {\n    checkSVG,\n    dissatisfiedEmoji,\n    neutralEmoji,\n    satisfiedEmoji,\n    veryDissatisfiedEmoji,\n    verySatisfiedEmoji,\n} from '../icons'\nimport { getDisplayOrderChoices } from '../surveys-utils'\nimport { BottomSection } from './BottomSection'\nimport { QuestionHeader } from './QuestionHeader'\n\nexport function OpenTextQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n}: {\n    question: BasicSurveyQuestion\n    forceDisableHtml: boolean\n    appearance: SurveyAppearance\n    onSubmit: (text: string) => void\n}) {\n    const textRef = useRef(null)\n    const [text, setText] = useState('')\n\n    return (\n        <div ref={textRef}>\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                descriptionContentType={question.descriptionContentType}\n                backgroundColor={appearance.backgroundColor}\n                forceDisableHtml={forceDisableHtml}\n            />\n            <textarea rows={4} placeholder={appearance?.placeholder} onInput={(e) => setText(e.currentTarget.value)} />\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={!text && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(text)}\n            />\n        </div>\n    )\n}\n\nexport function LinkQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n}: {\n    question: LinkSurveyQuestion\n    forceDisableHtml: boolean\n    appearance: SurveyAppearance\n    onSubmit: (clicked: string) => void\n}) {\n    return (\n        <>\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                descriptionContentType={question.descriptionContentType}\n                forceDisableHtml={forceDisableHtml}\n            />\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={false}\n                link={question.link}\n                appearance={appearance}\n                onSubmit={() => onSubmit('link clicked')}\n            />\n        </>\n    )\n}\n\nexport function RatingQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n}: {\n    question: RatingSurveyQuestion\n    forceDisableHtml: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    onSubmit: (rating: number | null) => void\n}) {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const [rating, setRating] = useState<number | null>(null)\n\n    return (\n        <>\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                descriptionContentType={question.descriptionContentType}\n                forceDisableHtml={forceDisableHtml}\n                backgroundColor={appearance.backgroundColor}\n            />\n            <div className=\"rating-section\">\n                <div className=\"rating-options\">\n                    {question.display === 'emoji' && (\n                        <div className=\"rating-options-emoji\">\n                            {(question.scale === 3 ? threeScaleEmojis : fiveScaleEmojis).map((emoji, idx) => {\n                                const active = idx + 1 === rating\n                                return (\n                                    <button\n                                        className={`ratings-emoji question-${displayQuestionIndex}-rating-${idx} ${\n                                            active ? 'rating-active' : null\n                                        }`}\n                                        value={idx + 1}\n                                        key={idx}\n                                        type=\"button\"\n                                        onClick={() => {\n                                            setRating(idx + 1)\n                                        }}\n                                        style={{\n                                            fill: active\n                                                ? appearance.ratingButtonActiveColor\n                                                : appearance.ratingButtonColor,\n                                            borderColor: appearance.borderColor,\n                                        }}\n                                    >\n                                        {emoji}\n                                    </button>\n                                )\n                            })}\n                        </div>\n                    )}\n                    {question.display === 'number' && (\n                        <div\n                            className=\"rating-options-number\"\n                            style={{ gridTemplateColumns: `repeat(${scale - starting + 1}, minmax(0, 1fr))` }}\n                        >\n                            {getScaleNumbers(question.scale).map((number, idx) => {\n                                const active = rating === number\n                                return (\n                                    <RatingButton\n                                        key={idx}\n                                        displayQuestionIndex={displayQuestionIndex}\n                                        active={active}\n                                        appearance={appearance}\n                                        num={number}\n                                        setActiveNumber={(num) => {\n                                            setRating(num)\n                                        }}\n                                    />\n                                )\n                            })}\n                        </div>\n                    )}\n                </div>\n                <div className=\"rating-text\">\n                    <div>{question.lowerBoundLabel}</div>\n                    <div>{question.upperBoundLabel}</div>\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || appearance?.submitButtonText || 'Submit'}\n                submitDisabled={isNull(rating) && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(rating)}\n            />\n        </>\n    )\n}\n\nexport function RatingButton({\n    num,\n    active,\n    displayQuestionIndex,\n    appearance,\n    setActiveNumber,\n}: {\n    num: number\n    active: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    setActiveNumber: (num: number) => void\n}) {\n    const { textColor, ref } = useContrastingTextColor({ appearance, defaultTextColor: 'black', forceUpdate: active })\n    return (\n        <button\n            ref={ref as RefObject<HTMLButtonElement>}\n            className={`ratings-number question-${displayQuestionIndex}-rating-${num} ${\n                active ? 'rating-active' : null\n            }`}\n            type=\"button\"\n            onClick={() => {\n                setActiveNumber(num)\n            }}\n            style={{\n                color: textColor,\n                backgroundColor: active ? appearance.ratingButtonActiveColor : appearance.ratingButtonColor,\n                borderColor: appearance.borderColor,\n            }}\n        >\n            {num}\n        </button>\n    )\n}\n\nexport function MultipleChoiceQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n}: {\n    question: MultipleSurveyQuestion\n    forceDisableHtml: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    onSubmit: (choices: string | string[] | null) => void\n}) {\n    const textRef = useRef(null)\n    const choices = useMemo(() => getDisplayOrderChoices(question), [question])\n    const [selectedChoices, setSelectedChoices] = useState<string | string[] | null>(\n        question.type === SurveyQuestionType.MultipleChoice ? [] : null\n    )\n    const [openChoiceSelected, setOpenChoiceSelected] = useState(false)\n    const [openEndedInput, setOpenEndedInput] = useState('')\n\n    const inputType = question.type === SurveyQuestionType.SingleChoice ? 'radio' : 'checkbox'\n    return (\n        <div ref={textRef}>\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                descriptionContentType={question.descriptionContentType}\n                forceDisableHtml={forceDisableHtml}\n                backgroundColor={appearance.backgroundColor}\n            />\n            <div className=\"multiple-choice-options\">\n                {/* Remove the last element from the choices, if hasOpenChoice is set */}\n                {/* shuffle all other options here if question.shuffleOptions is set */}\n                {/* Always ensure that the open ended choice is the last option */}\n                {choices.map((choice: string, idx: number) => {\n                    let choiceClass = 'choice-option'\n                    const val = choice\n                    const option = choice\n                    if (!!question.hasOpenChoice && idx === question.choices.length - 1) {\n                        choiceClass += ' choice-option-open'\n                    }\n                    return (\n                        <div className={choiceClass}>\n                            <input\n                                type={inputType}\n                                id={`surveyQuestion${displayQuestionIndex}Choice${idx}`}\n                                name={`question${displayQuestionIndex}`}\n                                value={val}\n                                disabled={!val}\n                                onInput={() => {\n                                    if (question.hasOpenChoice && idx === question.choices.length - 1) {\n                                        return setOpenChoiceSelected(!openChoiceSelected)\n                                    }\n                                    if (question.type === SurveyQuestionType.SingleChoice) {\n                                        return setSelectedChoices(val)\n                                    }\n                                    if (\n                                        question.type === SurveyQuestionType.MultipleChoice &&\n                                        isArray(selectedChoices)\n                                    ) {\n                                        if (selectedChoices.includes(val)) {\n                                            // filter out values because clicking on a selected choice should deselect it\n                                            return setSelectedChoices(\n                                                selectedChoices.filter((choice) => choice !== val)\n                                            )\n                                        }\n                                        return setSelectedChoices([...selectedChoices, val])\n                                    }\n                                }}\n                            />\n                            <label\n                                htmlFor={`surveyQuestion${displayQuestionIndex}Choice${idx}`}\n                                style={{ color: 'black' }}\n                            >\n                                {question.hasOpenChoice && idx === question.choices.length - 1 ? (\n                                    <>\n                                        <span>{option}:</span>\n                                        <input\n                                            type=\"text\"\n                                            id={`surveyQuestion${displayQuestionIndex}Choice${idx}Open`}\n                                            name={`question${displayQuestionIndex}`}\n                                            onInput={(e) => {\n                                                const userValue = e.currentTarget.value\n                                                if (question.type === SurveyQuestionType.SingleChoice) {\n                                                    return setSelectedChoices(userValue)\n                                                }\n                                                if (\n                                                    question.type === SurveyQuestionType.MultipleChoice &&\n                                                    isArray(selectedChoices)\n                                                ) {\n                                                    return setOpenEndedInput(userValue)\n                                                }\n                                            }}\n                                        />\n                                    </>\n                                ) : (\n                                    option\n                                )}\n                            </label>\n                            <span className=\"choice-check\" style={{ color: 'black' }}>\n                                {checkSVG}\n                            </span>\n                        </div>\n                    )\n                })}\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={\n                    (isNull(selectedChoices) ||\n                        (isArray(selectedChoices) && !openChoiceSelected && selectedChoices.length === 0) ||\n                        (isArray(selectedChoices) &&\n                            openChoiceSelected &&\n                            !openEndedInput &&\n                            selectedChoices.length === 0 &&\n                            !question.optional)) &&\n                    !question.optional\n                }\n                appearance={appearance}\n                onSubmit={() => {\n                    if (openChoiceSelected && question.type === SurveyQuestionType.MultipleChoice) {\n                        if (isArray(selectedChoices)) {\n                            onSubmit([...selectedChoices, openEndedInput])\n                        }\n                    } else {\n                        onSubmit(selectedChoices)\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nconst threeScaleEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\nconst fiveScaleEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\nconst fiveScaleNumbers = [1, 2, 3, 4, 5]\nconst sevenScaleNumbers = [1, 2, 3, 4, 5, 6, 7]\nconst tenScaleNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfunction getScaleNumbers(scale: number): number[] {\n    switch (scale) {\n        case 5:\n            return fiveScaleNumbers\n        case 7:\n            return sevenScaleNumbers\n        case 10:\n            return tenScaleNumbers\n        default:\n            return fiveScaleNumbers\n    }\n}\n","import { PostHog } from '../posthog-core'\nimport {\n    Survey,\n    SurveyAppearance,\n    SurveyQuestion,\n    SurveyQuestionBranchingType,\n    SurveyQuestionType,\n    SurveyRenderReason,\n    SurveyType,\n} from '../posthog-surveys-types'\n\nimport { window as _window, document as _document } from '../utils/globals'\nimport {\n    style,\n    defaultSurveyAppearance,\n    sendSurveyEvent,\n    dismissedSurveyEvent,\n    createShadow,\n    getContrastingTextColor,\n    SurveyContext,\n    getDisplayOrderQuestions,\n    getSurveySeen,\n} from './surveys/surveys-utils'\nimport * as Preact from 'preact'\nimport { createWidgetShadow, createWidgetStyle } from './surveys-widget'\nimport { useState, useEffect, useRef, useContext, useMemo } from 'preact/hooks'\nimport { isNull, isNumber } from '../utils/type-utils'\nimport { ConfirmationMessage } from './surveys/components/ConfirmationMessage'\nimport {\n    OpenTextQuestion,\n    LinkQuestion,\n    RatingQuestion,\n    MultipleChoiceQuestion,\n} from './surveys/components/QuestionTypes'\nimport { logger } from '../utils/logger'\nimport { Cancel } from './surveys/components/QuestionHeader'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nexport class SurveyManager {\n    private posthog: PostHog\n    private surveyInFocus: string | null\n\n    constructor(posthog: PostHog) {\n        this.posthog = posthog\n        // This is used to track the survey that is currently in focus. We only show one survey at a time.\n        this.surveyInFocus = null\n    }\n\n    private canShowNextEventBasedSurvey = (): boolean => {\n        // with event based surveys, we need to show the next survey without reloading the page.\n        // A simple check for div elements with the class name pattern of PostHogSurvey_xyz doesn't work here\n        // because preact leaves behind the div element for any surveys responded/dismissed with a <style> node.\n        // To alleviate this, we check the last div in the dom and see if it has any elements other than a Style node.\n        // if the last PostHogSurvey_xyz div has only one style node, we can show the next survey in the queue\n        // without reloading the page.\n        const surveyPopups = document.querySelectorAll(`div[class^=PostHogSurvey]`)\n        if (surveyPopups.length > 0) {\n            return surveyPopups[surveyPopups.length - 1].shadowRoot?.childElementCount === 1\n        }\n        return true\n    }\n\n    private handlePopoverSurvey = (survey: Survey): void => {\n        const surveyWaitPeriodInDays = survey.conditions?.seenSurveyWaitPeriodInDays\n        const lastSeenSurveyDate = localStorage.getItem(`lastSeenSurveyDate`)\n        if (surveyWaitPeriodInDays && lastSeenSurveyDate) {\n            const today = new Date()\n            const diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime())\n            const diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24))\n            if (diffDaysFromToday < surveyWaitPeriodInDays) {\n                return\n            }\n        }\n\n        const surveySeen = getSurveySeen(survey)\n        if (!surveySeen) {\n            this.addSurveyToFocus(survey.id)\n            const shadow = createShadow(style(survey?.appearance), survey.id)\n            Preact.render(\n                <SurveyPopup\n                    key={'popover-survey'}\n                    posthog={this.posthog}\n                    survey={survey}\n                    removeSurveyFromFocus={this.removeSurveyFromFocus}\n                    isPopup={true}\n                />,\n                shadow\n            )\n        }\n    }\n\n    private handleWidget = (survey: Survey): void => {\n        const shadow = createWidgetShadow(survey)\n        const surveyStyleSheet = style(survey.appearance)\n        shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }))\n        Preact.render(\n            <FeedbackWidget\n                key={'feedback-survey'}\n                posthog={this.posthog}\n                survey={survey}\n                removeSurveyFromFocus={this.removeSurveyFromFocus}\n            />,\n            shadow\n        )\n    }\n\n    private handleWidgetSelector = (survey: Survey): void => {\n        const selectorOnPage =\n            survey.appearance?.widgetSelector && document.querySelector(survey.appearance.widgetSelector)\n        if (selectorOnPage) {\n            if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0) {\n                this.handleWidget(survey)\n            } else if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 1) {\n                // we have to check if user selector already has a survey listener attached to it because we always have to check if it's on the page or not\n                if (!selectorOnPage.getAttribute('PHWidgetSurveyClickListener')) {\n                    const surveyPopup = document\n                        .querySelector(`.PostHogWidget${survey.id}`)\n                        ?.shadowRoot?.querySelector(`.survey-form`) as HTMLFormElement\n                    selectorOnPage.addEventListener('click', () => {\n                        if (surveyPopup) {\n                            surveyPopup.style.display = surveyPopup.style.display === 'none' ? 'block' : 'none'\n                            surveyPopup.addEventListener('PHSurveyClosed', () => {\n                                this.removeSurveyFromFocus(survey.id)\n                                surveyPopup.style.display = 'none'\n                            })\n                        }\n                    })\n                    selectorOnPage.setAttribute('PHWidgetSurveyClickListener', 'true')\n                }\n            }\n        }\n    }\n\n    /**\n     * Sorts surveys by their appearance delay in ascending order. If a survey does not have an appearance delay,\n     * it is considered to have a delay of 0.\n     * @param surveys\n     * @returns The surveys sorted by their appearance delay\n     */\n    private sortSurveysByAppearanceDelay(surveys: Survey[]): Survey[] {\n        return surveys.sort(\n            (a, b) => (a.appearance?.surveyPopupDelaySeconds || 0) - (b.appearance?.surveyPopupDelaySeconds || 0)\n        )\n    }\n\n    /**\n     * Checks the feature flags associated with this Survey to see if the survey can be rendered.\n     * @param survey\n     * @param instance\n     */\n    public canRenderSurvey = (survey: Survey): SurveyRenderReason => {\n        const renderReason: SurveyRenderReason = {\n            visible: false,\n        }\n\n        if (survey.end_date) {\n            renderReason.disabledReason = `survey was completed on ${survey.end_date}`\n            return renderReason\n        }\n\n        if (survey.type != SurveyType.Popover) {\n            renderReason.disabledReason = `Only Popover survey types can be rendered`\n            return renderReason\n        }\n\n        const linkedFlagCheck = survey.linked_flag_key\n            ? this.posthog.featureFlags.isFeatureEnabled(survey.linked_flag_key)\n            : true\n\n        if (!linkedFlagCheck) {\n            renderReason.disabledReason = `linked feature flag ${survey.linked_flag_key} is false`\n            return renderReason\n        }\n\n        const targetingFlagCheck = survey.targeting_flag_key\n            ? this.posthog.featureFlags.isFeatureEnabled(survey.targeting_flag_key)\n            : true\n\n        if (!targetingFlagCheck) {\n            renderReason.disabledReason = `targeting feature flag ${survey.targeting_flag_key} is false`\n            return renderReason\n        }\n\n        const internalTargetingFlagCheck = survey.internal_targeting_flag_key\n            ? this.posthog.featureFlags.isFeatureEnabled(survey.internal_targeting_flag_key)\n            : true\n\n        if (!internalTargetingFlagCheck) {\n            renderReason.disabledReason = `internal targeting feature flag ${survey.internal_targeting_flag_key} is false`\n            return renderReason\n        }\n\n        renderReason.visible = true\n        return renderReason\n    }\n\n    public renderSurvey = (survey: Survey, selector: Element): void => {\n        Preact.render(\n            <SurveyPopup\n                key={'popover-survey'}\n                posthog={this.posthog}\n                survey={survey}\n                removeSurveyFromFocus={this.removeSurveyFromFocus}\n                isPopup={false}\n            />,\n            selector\n        )\n    }\n\n    public callSurveysAndEvaluateDisplayLogic = (forceReload: boolean = false): void => {\n        this.posthog?.getActiveMatchingSurveys((surveys) => {\n            const nonAPISurveys = surveys.filter((survey) => survey.type !== 'api')\n\n            // Create a queue of surveys sorted by their appearance delay.  We will evaluate the display logic\n            // for each survey in the queue in order, and only display one survey at a time.\n            const nonAPISurveyQueue = this.sortSurveysByAppearanceDelay(nonAPISurveys)\n\n            nonAPISurveyQueue.forEach((survey) => {\n                // We only evaluate the display logic for one survey at a time\n                if (!isNull(this.surveyInFocus)) {\n                    return\n                }\n                if (survey.type === SurveyType.Widget) {\n                    if (\n                        survey.appearance?.widgetType === 'tab' &&\n                        document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0\n                    ) {\n                        this.handleWidget(survey)\n                    }\n                    if (survey.appearance?.widgetType === 'selector' && survey.appearance?.widgetSelector) {\n                        this.handleWidgetSelector(survey)\n                    }\n                }\n\n                if (survey.type === SurveyType.Popover && this.canShowNextEventBasedSurvey()) {\n                    this.handlePopoverSurvey(survey)\n                }\n            })\n        }, forceReload)\n    }\n\n    private addSurveyToFocus = (id: string): void => {\n        if (!isNull(this.surveyInFocus)) {\n            logger.error(`Survey ${[...this.surveyInFocus]} already in focus. Cannot add survey ${id}.`)\n        }\n        this.surveyInFocus = id\n    }\n\n    private removeSurveyFromFocus = (id: string): void => {\n        if (this.surveyInFocus !== id) {\n            logger.error(`Survey ${id} is not in focus. Cannot remove survey ${id}.`)\n        }\n        this.surveyInFocus = null\n    }\n\n    // Expose internal state and methods for testing\n    public getTestAPI() {\n        return {\n            addSurveyToFocus: this.addSurveyToFocus,\n            removeSurveyFromFocus: this.removeSurveyFromFocus,\n            surveyInFocus: this.surveyInFocus,\n            canShowNextEventBasedSurvey: this.canShowNextEventBasedSurvey,\n            handleWidget: this.handleWidget,\n            handlePopoverSurvey: this.handlePopoverSurvey,\n            handleWidgetSelector: this.handleWidgetSelector,\n            sortSurveysByAppearanceDelay: this.sortSurveysByAppearanceDelay,\n        }\n    }\n}\n\nexport const renderSurveysPreview = ({\n    survey,\n    parentElement,\n    previewPageIndex,\n    forceDisableHtml,\n}: {\n    survey: Survey\n    parentElement: HTMLElement\n    previewPageIndex: number\n    forceDisableHtml?: boolean\n}) => {\n    const surveyStyleSheet = style(survey.appearance)\n    const styleElement = Object.assign(document.createElement('style'), { innerText: surveyStyleSheet })\n\n    // Remove previously attached <style>\n    Array.from(parentElement.children).forEach((child) => {\n        if (child instanceof HTMLStyleElement) {\n            parentElement.removeChild(child)\n        }\n    })\n\n    parentElement.appendChild(styleElement)\n    const textColor = getContrastingTextColor(\n        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor || 'white'\n    )\n\n    Preact.render(\n        <SurveyPopup\n            key=\"surveys-render-preview\"\n            survey={survey}\n            forceDisableHtml={forceDisableHtml}\n            style={{\n                position: 'relative',\n                right: 0,\n                borderBottom: `1px solid ${survey.appearance?.borderColor}`,\n                borderRadius: 10,\n                color: textColor,\n            }}\n            previewPageIndex={previewPageIndex}\n            removeSurveyFromFocus={() => {}}\n            isPopup={true}\n        />,\n        parentElement\n    )\n}\n\nexport const renderFeedbackWidgetPreview = ({\n    survey,\n    root,\n    forceDisableHtml,\n}: {\n    survey: Survey\n    root: HTMLElement\n    forceDisableHtml?: boolean\n}) => {\n    const widgetStyleSheet = createWidgetStyle(survey.appearance?.widgetColor)\n    const styleElement = Object.assign(document.createElement('style'), { innerText: widgetStyleSheet })\n    root.appendChild(styleElement)\n    Preact.render(\n        <FeedbackWidget\n            key={'feedback-render-preview'}\n            forceDisableHtml={forceDisableHtml}\n            survey={survey}\n            readOnly={true}\n            removeSurveyFromFocus={() => {}}\n        />,\n        root\n    )\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n\n    const surveyManager = new SurveyManager(posthog)\n    surveyManager.callSurveysAndEvaluateDisplayLogic(true)\n\n    // recalculate surveys every second to check if URL or selectors have changed\n    setInterval(() => {\n        surveyManager.callSurveysAndEvaluateDisplayLogic(false)\n    }, 1000)\n    return surveyManager\n}\n\nexport function usePopupVisibility(\n    survey: Survey,\n    posthog: PostHog | undefined,\n    millisecondDelay: number,\n    isPreviewMode: boolean,\n    removeSurveyFromFocus: (id: string) => void\n) {\n    const [isPopupVisible, setIsPopupVisible] = useState(isPreviewMode || millisecondDelay === 0)\n    const [isSurveySent, setIsSurveySent] = useState(false)\n\n    useEffect(() => {\n        if (isPreviewMode || !posthog) {\n            return\n        }\n\n        const handleSurveyClosed = () => {\n            removeSurveyFromFocus(survey.id)\n            setIsPopupVisible(false)\n        }\n\n        const handleSurveySent = () => {\n            if (!survey.appearance?.displayThankYouMessage) {\n                removeSurveyFromFocus(survey.id)\n                setIsPopupVisible(false)\n            } else {\n                setIsSurveySent(true)\n                removeSurveyFromFocus(survey.id)\n                if (survey.appearance?.autoDisappear) {\n                    setTimeout(() => {\n                        setIsPopupVisible(false)\n                    }, 5000)\n                }\n            }\n        }\n\n        const showSurvey = () => {\n            setIsPopupVisible(true)\n            window.dispatchEvent(new Event('PHSurveyShown'))\n            posthog.capture('survey shown', {\n                $survey_name: survey.name,\n                $survey_id: survey.id,\n                $survey_iteration: survey.current_iteration,\n                $survey_iteration_start_date: survey.current_iteration_start_date,\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n            })\n            localStorage.setItem('lastSeenSurveyDate', new Date().toISOString())\n        }\n\n        const handleShowSurveyWithDelay = () => {\n            const timeoutId = setTimeout(() => {\n                showSurvey()\n            }, millisecondDelay)\n\n            return () => {\n                clearTimeout(timeoutId)\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed)\n                window.removeEventListener('PHSurveySent', handleSurveySent)\n            }\n        }\n\n        const handleShowSurveyImmediately = () => {\n            showSurvey()\n            return () => {\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed)\n                window.removeEventListener('PHSurveySent', handleSurveySent)\n            }\n        }\n\n        window.addEventListener('PHSurveyClosed', handleSurveyClosed)\n        window.addEventListener('PHSurveySent', handleSurveySent)\n\n        if (millisecondDelay > 0) {\n            return handleShowSurveyWithDelay()\n        } else {\n            return handleShowSurveyImmediately()\n        }\n    }, [])\n\n    return { isPopupVisible, isSurveySent, setIsPopupVisible }\n}\n\nexport function SurveyPopup({\n    survey,\n    forceDisableHtml,\n    posthog,\n    style,\n    previewPageIndex,\n    removeSurveyFromFocus,\n    isPopup,\n}: {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    style?: React.CSSProperties\n    previewPageIndex?: number | undefined\n    removeSurveyFromFocus: (id: string) => void\n    isPopup?: boolean\n}) {\n    const isPreviewMode = Number.isInteger(previewPageIndex)\n    // NB: The client-side code passes the millisecondDelay in seconds, but setTimeout expects milliseconds, so we multiply by 1000\n    const surveyPopupDelayMilliseconds = survey.appearance?.surveyPopupDelaySeconds\n        ? survey.appearance.surveyPopupDelaySeconds * 1000\n        : 0\n    const { isPopupVisible, isSurveySent, setIsPopupVisible } = usePopupVisibility(\n        survey,\n        posthog,\n        surveyPopupDelayMilliseconds,\n        isPreviewMode,\n        removeSurveyFromFocus\n    )\n    const shouldShowConfirmation = isSurveySent || previewPageIndex === survey.questions.length\n    const confirmationBoxLeftStyle = style?.left && isNumber(style?.left) ? { left: style.left - 40 } : {}\n\n    if (isPreviewMode) {\n        style = style || {}\n        style.left = 'unset'\n        style.right = 'unset'\n        style.transform = 'unset'\n    }\n\n    return isPopupVisible ? (\n        <SurveyContext.Provider\n            value={{\n                isPreviewMode,\n                previewPageIndex: previewPageIndex,\n                handleCloseSurveyPopup: () => dismissedSurveyEvent(survey, posthog, isPreviewMode),\n                isPopup: isPopup || false,\n            }}\n        >\n            {!shouldShowConfirmation ? (\n                <Questions\n                    survey={survey}\n                    forceDisableHtml={!!forceDisableHtml}\n                    posthog={posthog}\n                    styleOverrides={style}\n                />\n            ) : (\n                <ConfirmationMessage\n                    header={survey.appearance?.thankYouMessageHeader || 'Thank you!'}\n                    description={survey.appearance?.thankYouMessageDescription || ''}\n                    forceDisableHtml={!!forceDisableHtml}\n                    contentType={survey.appearance?.thankYouMessageDescriptionContentType}\n                    appearance={survey.appearance || defaultSurveyAppearance}\n                    styleOverrides={{ ...style, ...confirmationBoxLeftStyle }}\n                    onClose={() => setIsPopupVisible(false)}\n                />\n            )}\n        </SurveyContext.Provider>\n    ) : (\n        <></>\n    )\n}\n\nexport function Questions({\n    survey,\n    forceDisableHtml,\n    posthog,\n    styleOverrides,\n}: {\n    survey: Survey\n    forceDisableHtml: boolean\n    posthog?: PostHog\n    styleOverrides?: React.CSSProperties\n}) {\n    const textColor = getContrastingTextColor(\n        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor\n    )\n    const [questionsResponses, setQuestionsResponses] = useState({})\n    const { isPreviewMode, previewPageIndex, handleCloseSurveyPopup, isPopup } = useContext(SurveyContext)\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(previewPageIndex || 0)\n    const surveyQuestions = useMemo(() => getDisplayOrderQuestions(survey), [survey])\n\n    // Sync preview state\n    useEffect(() => {\n        setCurrentQuestionIndex(previewPageIndex ?? 0)\n    }, [previewPageIndex])\n\n    const onNextButtonClick = ({\n        res,\n        originalQuestionIndex,\n        displayQuestionIndex,\n    }: {\n        res: string | string[] | number | null\n        originalQuestionIndex: number\n        displayQuestionIndex: number\n    }) => {\n        if (!posthog) {\n            return\n        }\n\n        const responseKey =\n            originalQuestionIndex === 0 ? `$survey_response` : `$survey_response_${originalQuestionIndex}`\n\n        setQuestionsResponses({ ...questionsResponses, [responseKey]: res })\n\n        // Old SDK, no branching\n        if (!posthog.getNextSurveyStep) {\n            const isLastDisplayedQuestion = displayQuestionIndex === survey.questions.length - 1\n            if (isLastDisplayedQuestion) {\n                sendSurveyEvent({ ...questionsResponses, [responseKey]: res }, survey, posthog)\n            } else {\n                setCurrentQuestionIndex(displayQuestionIndex + 1)\n            }\n            return\n        }\n\n        const nextStep = posthog.getNextSurveyStep(survey, displayQuestionIndex, res)\n        if (nextStep === SurveyQuestionBranchingType.End) {\n            sendSurveyEvent({ ...questionsResponses, [responseKey]: res }, survey, posthog)\n        } else {\n            setCurrentQuestionIndex(nextStep)\n        }\n    }\n\n    return (\n        <form\n            className=\"survey-form\"\n            style={\n                isPopup\n                    ? {\n                          color: textColor,\n                          borderColor: survey.appearance?.borderColor,\n                          ...styleOverrides,\n                      }\n                    : {}\n            }\n        >\n            {surveyQuestions.map((question, displayQuestionIndex) => {\n                const { originalQuestionIndex } = question\n\n                const isVisible = isPreviewMode\n                    ? currentQuestionIndex === originalQuestionIndex\n                    : currentQuestionIndex === displayQuestionIndex\n                return (\n                    isVisible && (\n                        <div\n                            className=\"survey-box\"\n                            style={\n                                isPopup\n                                    ? {\n                                          backgroundColor:\n                                              survey.appearance?.backgroundColor ||\n                                              defaultSurveyAppearance.backgroundColor,\n                                      }\n                                    : {}\n                            }\n                        >\n                            {isPopup && <Cancel onClick={() => handleCloseSurveyPopup()} />}\n                            {getQuestionComponent({\n                                question,\n                                forceDisableHtml,\n                                displayQuestionIndex,\n                                appearance: survey.appearance || defaultSurveyAppearance,\n                                onSubmit: (res) =>\n                                    onNextButtonClick({\n                                        res,\n                                        originalQuestionIndex,\n                                        displayQuestionIndex,\n                                    }),\n                            })}\n                        </div>\n                    )\n                )\n            })}\n        </form>\n    )\n}\n\nexport function FeedbackWidget({\n    survey,\n    forceDisableHtml,\n    posthog,\n    readOnly,\n    removeSurveyFromFocus,\n}: {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    readOnly?: boolean\n    removeSurveyFromFocus: (id: string) => void\n}): JSX.Element {\n    const [showSurvey, setShowSurvey] = useState(false)\n    const [styleOverrides, setStyle] = useState({})\n    const widgetRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        if (readOnly || !posthog) {\n            return\n        }\n\n        if (survey.appearance?.widgetType === 'tab') {\n            if (widgetRef.current) {\n                const widgetPos = widgetRef.current.getBoundingClientRect()\n                const style = {\n                    top: '50%',\n                    left: parseInt(`${widgetPos.right - 360}`),\n                    bottom: 'auto',\n                    borderRadius: 10,\n                    borderBottom: `1.5px solid ${survey.appearance?.borderColor || '#c9c6c6'}`,\n                }\n                setStyle(style)\n            }\n        }\n        if (survey.appearance?.widgetType === 'selector') {\n            const widget = document.querySelector(survey.appearance.widgetSelector || '')\n            widget?.addEventListener('click', () => {\n                setShowSurvey(!showSurvey)\n            })\n            widget?.setAttribute('PHWidgetSurveyClickListener', 'true')\n        }\n    }, [])\n\n    return (\n        <>\n            {survey.appearance?.widgetType === 'tab' && (\n                <div\n                    className=\"ph-survey-widget-tab\"\n                    ref={widgetRef}\n                    onClick={() => !readOnly && setShowSurvey(!showSurvey)}\n                    style={{ color: getContrastingTextColor(survey.appearance.widgetColor) }}\n                >\n                    <div className=\"ph-survey-widget-tab-icon\"></div>\n                    {survey.appearance?.widgetLabel || ''}\n                </div>\n            )}\n            {showSurvey && (\n                <SurveyPopup\n                    key={'feedback-widget-survey'}\n                    posthog={posthog}\n                    survey={survey}\n                    forceDisableHtml={forceDisableHtml}\n                    style={styleOverrides}\n                    removeSurveyFromFocus={removeSurveyFromFocus}\n                    isPopup={true}\n                />\n            )}\n        </>\n    )\n}\n\ninterface GetQuestionComponentProps {\n    question: SurveyQuestion\n    forceDisableHtml: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    onSubmit: (res: string | string[] | number | null) => void\n}\n\nconst getQuestionComponent = ({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n}: GetQuestionComponentProps): JSX.Element => {\n    const questionComponents = {\n        [SurveyQuestionType.Open]: OpenTextQuestion,\n        [SurveyQuestionType.Link]: LinkQuestion,\n        [SurveyQuestionType.Rating]: RatingQuestion,\n        [SurveyQuestionType.SingleChoice]: MultipleChoiceQuestion,\n        [SurveyQuestionType.MultipleChoice]: MultipleChoiceQuestion,\n    }\n\n    const commonProps = {\n        question,\n        forceDisableHtml,\n        appearance,\n        onSubmit,\n    }\n\n    const additionalProps: Record<SurveyQuestionType, any> = {\n        [SurveyQuestionType.Open]: {},\n        [SurveyQuestionType.Link]: {},\n        [SurveyQuestionType.Rating]: { displayQuestionIndex },\n        [SurveyQuestionType.SingleChoice]: { displayQuestionIndex },\n        [SurveyQuestionType.MultipleChoice]: { displayQuestionIndex },\n    }\n\n    const Component = questionComponents[question.type]\n    const componentProps = { ...commonProps, ...additionalProps[question.type] }\n\n    return <Component {...componentProps} />\n}\n","import { Survey } from '../posthog-surveys-types'\nimport { document as _document } from '../utils/globals'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst document = _document as Document\n\nexport function createWidgetShadow(survey: Survey) {\n    const div = document.createElement('div')\n    div.className = `PostHogWidget${survey.id}`\n    const shadow = div.attachShadow({ mode: 'open' })\n    const widgetStyleSheet = createWidgetStyle(survey.appearance?.widgetColor)\n    shadow.append(Object.assign(document.createElement('style'), { innerText: widgetStyleSheet }))\n    document.body.appendChild(div)\n    return shadow\n}\n\nexport function createWidgetStyle(widgetColor?: string) {\n    return `\n        .ph-survey-widget-tab {\n            position: fixed;\n            top: 50%;\n            right: 0;\n            background: ${widgetColor || '#e0a045'};\n            color: white;\n            transform: rotate(-90deg) translate(0, -100%);\n            transform-origin: right top;\n            min-width: 40px;\n            padding: 8px 12px;\n            font-weight: 500;\n            border-radius: 3px 3px 0 0;\n            text-align: center;\n            cursor: pointer;\n            z-index: 9999999;\n        }\n        .ph-survey-widget-tab:hover {\n            padding-bottom: 13px;\n        }\n        .ph-survey-widget-button {\n            position: fixed;\n        }\n    `\n}\n"],"names":["SurveyType","SurveyQuestionType","SurveyQuestionBranchingType","win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","__u","_window","hex2rgb","c","hexColor","replace","parseInt","slice","getContrastingTextColor","rgb","color","arguments","length","defaultBackgroundColor","startsWith","nameColorToHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","toLowerCase","colorMatch","match","r","g","b","Math","sqrt","defaultSurveyAppearance","backgroundColor","submitButtonColor","submitButtonTextColor","ratingButtonColor","ratingButtonActiveColor","borderColor","placeholder","whiteLabel","displayThankYouMessage","thankYouMessageHeader","position","sendSurveyEvent","_posthog$get_session_","responses","survey","posthog","localStorage","setItem","getSurveySeenKey","capture","_objectSpread","$survey_name","name","$survey_id","id","$survey_iteration","current_iteration","$survey_iteration_start_date","current_iteration_start_date","$survey_questions","questions","map","question","sessionRecordingUrl","get_session_replay_url","call","$set","_defineProperty","getSurveyInteractionProperty","dispatchEvent","Event","dismissedSurveyEvent","readOnly","_posthog$get_session_2","shuffle","array","a","sort","floor","random","value","reverseIfUnshuffled","unshuffled","shuffled","every","val","index","reverse","getDisplayOrderQuestions","forEach","idx","originalQuestionIndex","appearance","shuffleQuestions","surveySeenKey","concat","action","surveyProperty","SurveyContext","createContext","isPreviewMode","previewPageIndex","handleCloseSurveyPopup","isPopup","renderChildrenAsTextOrHtml","_ref","component","children","renderAsHtml","style","cloneElement","dangerouslySetInnerHTML","__html","currentIndex","currentComponent","previousComponent","prevRaf","currentHook","afterPaintEffects","EMPTY","oldBeforeDiff","options","__b","oldBeforeRender","__r","oldAfterDiff","diffed","oldCommit","__c","oldBeforeUnmount","unmount","getHookState","type","__h","hooks","__H","__","push","__V","useState","initialState","useReducer","reducer","init","hookState","_reducer","invokeOrReturn","n","currentValue","__N","nextValue","setState","_hasScuFromHooks","updateHookState","f","p","s","stateHooks","filter","x","prevScu","this","shouldUpdate","hookItem","props","shouldComponentUpdate","prevCWU","componentWillUpdate","__e","tmp","useEffect","callback","args","state","__s","argsChanged","_pendingArgs","useRef","initialValue","useMemo","current","factory","useContext","context","provider","sub","flushAfterPaintEffects","shift","__P","invokeCleanup","invokeEffect","e","__v","vnode","t","requestAnimationFrame","afterNextFrame","commitQueue","some","cb","hasErrored","HAS_RAF","raf","done","clearTimeout","timeout","cancelAnimationFrame","setTimeout","hook","comp","cleanup","oldArgs","newArgs","arg","nativeIsArray","Array","isArray","toString","Object","prototype","obj","isNull","isNumber","satisfiedEmoji","_jsx","className","xmlns","height","viewBox","width","d","neutralEmoji","dissatisfiedEmoji","veryDissatisfiedEmoji","verySatisfiedEmoji","cancelSVG","fill","IconPosthogLogo","_jsxs","maskType","maskUnits","y","mask","transform","checkSVG","PostHogLogo","href","target","rel","BottomSection","text","submitDisabled","onSubmit","link","_useContext","textColor","disabled","onClick","open","QuestionHeader","description","descriptionContentType","forceDisableHtml","h","Cancel","_ref2","ConfirmationMessage","header","contentType","onClose","styleOverrides","_Fragment","thankYouMessageCloseButtonText","useContrastingTextColor","_options$defaultTextC","ref","_useState2","_slicedToArray","defaultTextColor","setTextColor","el","getComputedStyle","getTextColor","forceUpdate","OpenTextQuestion","textRef","setText","rows","onInput","currentTarget","buttonText","optional","LinkQuestion","RatingQuestion","_ref3","displayQuestionIndex","scale","starting","_useState4","rating","setRating","display","threeScaleEmojis","fiveScaleEmojis","emoji","active","gridTemplateColumns","getScaleNumbers","number","RatingButton","num","setActiveNumber","lowerBoundLabel","upperBoundLabel","submitButtonText","_ref4","_useContrastingTextCo","MultipleChoiceQuestion","_ref5","choices","shuffleOptions","displayOrderChoices","openEndedChoice","hasOpenChoice","pop","shuffledOptions","getDisplayOrderChoices","_useState6","MultipleChoice","selectedChoices","setSelectedChoices","_useState8","openChoiceSelected","setOpenChoiceSelected","_useState10","openEndedInput","setOpenEndedInput","inputType","SingleChoice","choice","choiceClass","option","includes","_toConsumableArray","htmlFor","userValue","fiveScaleNumbers","sevenScaleNumbers","tenScaleNumbers","_document","renderSurveysPreview","_survey$appearance5","_survey$appearance6","parentElement","surveyStyleSheet","maxWidth","zIndex","left","right","center","styleElement","assign","createElement","innerText","from","child","HTMLStyleElement","removeChild","appendChild","Preact","SurveyPopup","borderBottom","borderRadius","removeSurveyFromFocus","renderFeedbackWidgetPreview","_survey$appearance7","widgetColor","root","widgetStyleSheet","FeedbackWidget","_survey$appearance10","_style","_style2","_survey$appearance11","_survey$appearance12","_survey$appearance13","Number","isInteger","surveyPopupDelayMilliseconds","surveyPopupDelaySeconds","_usePopupVisibility","millisecondDelay","isPopupVisible","setIsPopupVisible","isSurveySent","setIsSurveySent","timeoutId","handleSurveyClosed","handleSurveySent","_survey$appearance8","_survey$appearance9","autoDisappear","showSurvey","Date","toISOString","addEventListener","removeEventListener","usePopupVisibility","shouldShowConfirmation","confirmationBoxLeftStyle","Provider","thankYouMessageDescription","thankYouMessageDescriptionContentType","Questions","_survey$appearance14","_survey$appearance15","questionsResponses","setQuestionsResponses","currentQuestionIndex","setCurrentQuestionIndex","surveyQuestions","_survey$appearance16","getQuestionComponent","res","responseKey","getNextSurveyStep","nextStep","End","onNextButtonClick","_ref6","_survey$appearance20","_survey$appearance21","setShowSurvey","_useState12","setStyle","widgetRef","_survey$appearance17","_survey$appearance19","widgetType","_survey$appearance18","widgetPos","getBoundingClientRect","top","bottom","widget","querySelector","widgetSelector","setAttribute","widgetLabel","_ref7","_questionComponents","_additionalProps","questionComponents","Open","Link","Rating","commonProps","additionalProps","Component","componentProps"],"mappings":"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","x_google_ignoreList":[2,4]}