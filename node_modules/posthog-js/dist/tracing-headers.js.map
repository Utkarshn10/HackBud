{"version":3,"file":"tracing-headers.js","sources":["../src/extensions/replay/rrweb-plugins/patch.ts","../src/utils/type-utils.ts","../src/utils/globals.ts","../src/entrypoints/tracing-headers.ts"],"sourcesContent":["// import { patch } from 'rrweb/typings/utils'\n// copied from https://github.com/rrweb-io/rrweb/blob/8aea5b00a4dfe5a6f59bd2ae72bb624f45e51e81/packages/rrweb/src/utils.ts#L129\n// which was copied from https://github.com/getsentry/sentry-javascript/blob/b2109071975af8bf0316d3b5b38f519bdaf5dc15/packages/utils/src/object.ts\nimport { isFunction } from '../../../utils/type-utils'\n\nexport function patch(\n    source: { [key: string]: any },\n    name: string,\n    replacement: (...args: unknown[]) => unknown\n): () => void {\n    try {\n        if (!(name in source)) {\n            return () => {\n                //\n            }\n        }\n\n        const original = source[name] as () => unknown\n        const wrapped = replacement(original)\n\n        // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n        // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n        if (isFunction(wrapped)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            wrapped.prototype = wrapped.prototype || {}\n            Object.defineProperties(wrapped, {\n                __posthog_wrapped__: {\n                    enumerable: false,\n                    value: true,\n                },\n            })\n        }\n\n        source[name] = wrapped\n\n        return () => {\n            source[name] = original\n        }\n    } catch {\n        return () => {\n            //\n        }\n        // This can throw if multiple fill happens on a global object like XMLHttpRequest\n        // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n}\n","// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\nexport const isUint8Array = function (x: unknown): x is Uint8Array {\n    return toString.call(x) === '[object Uint8Array]'\n}\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const isFunction = function (f: any): f is (...args: any[]) => any {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof f === 'function'\n}\n// Underscore Addons\nexport const isObject = function (x: unknown): x is Record<string, any> {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !isArray(x)\n}\nexport const isEmptyObject = function (x: unknown): x is Record<string, any> {\n    if (isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const isUndefined = function (x: unknown): x is undefined {\n    return x === void 0\n}\n\nexport const isString = function (x: unknown): x is string {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const isEmptyString = function (x: unknown): boolean {\n    return isString(x) && x.trim().length === 0\n}\n\nexport const isNull = function (x: unknown): x is null {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\n\n/*\n    sometimes you want to check if something is null or undefined\n    that's what this is for\n */\nexport const isNullish = function (x: unknown): x is null | undefined {\n    return isUndefined(x) || isNull(x)\n}\n\nexport const isDate = function (x: unknown): x is Date {\n    // eslint-disable-next-line posthog-js/no-direct-date-check\n    return toString.call(x) == '[object Date]'\n}\nexport const isNumber = function (x: unknown): x is number {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const isBoolean = function (x: unknown): x is boolean {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n\nexport const isDocument = (x: unknown): x is Document => {\n    // eslint-disable-next-line posthog-js/no-direct-document-check\n    return x instanceof Document\n}\n\nexport const isFormData = (x: unknown): x is FormData => {\n    // eslint-disable-next-line posthog-js/no-direct-form-data-check\n    return x instanceof FormData\n}\n\nexport const isFile = (x: unknown): x is File => {\n    // eslint-disable-next-line posthog-js/no-direct-file-check\n    return x instanceof File\n}\n","import { ErrorProperties } from '../extensions/exception-autocapture/error-conversion'\nimport type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport { ErrorEventArgs, ErrorMetadata, Properties } from '../types'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'tracing-headers'\n    | 'surveys'\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    parseErrorAsProperties?: (\n        [event, source, lineno, colno, error]: ErrorEventArgs,\n        metadata?: ErrorMetadata\n    ) => ErrorProperties\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: Properties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: Properties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string; rrwebVersion: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    canActivateRepeatedly?: (survey: any) => boolean\n    generateSurveys?: (posthog: PostHog) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (sessionManager: SessionIdManager) => () => void\n        _patchXHR: (sessionManager: any) => () => void\n    }\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: Window &\n    typeof globalThis &\n    Record<string, any> & {\n        __PosthogExtensions__?: PostHogExtensions\n    } = win ?? ({} as any)\n\nexport { win as window }\n","import { SessionIdManager } from '../sessionid'\nimport { patch } from '../extensions/replay/rrweb-plugins/patch'\nimport { assignableWindow, window } from '../utils/globals'\n\nconst addTracingHeaders = (sessionManager: SessionIdManager, req: Request) => {\n    const { sessionId, windowId } = sessionManager.checkAndGetSessionAndWindowId(true)\n    req.headers.set('X-POSTHOG-SESSION-ID', sessionId)\n    req.headers.set('X-POSTHOG-WINDOW-ID', windowId)\n}\n\nconst patchFetch = (sessionManager: SessionIdManager): (() => void) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return patch(window, 'fetch', (originalFetch: typeof fetch) => {\n        return async function (url: URL | RequestInfo, init?: RequestInit | undefined) {\n            // check IE earlier than this, we only initialize if Request is present\n            // eslint-disable-next-line compat/compat\n            const req = new Request(url, init)\n\n            addTracingHeaders(sessionManager, req)\n\n            return originalFetch(req)\n        }\n    })\n}\n\nconst patchXHR = (sessionManager: SessionIdManager): (() => void) => {\n    return patch(\n        // we can assert this is present because we've checked previously\n        window!.XMLHttpRequest.prototype,\n        'open',\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (originalOpen: typeof XMLHttpRequest.prototype.open) => {\n            return function (\n                method: string,\n                url: string | URL,\n                async = true,\n                username?: string | null,\n                password?: string | null\n            ) {\n                // because this function is returned in its actual context `this` _is_ an XMLHttpRequest\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                const xhr = this as XMLHttpRequest\n\n                // check IE earlier than this, we only initialize if Request is present\n                // eslint-disable-next-line compat/compat\n                const req = new Request(url)\n\n                addTracingHeaders(sessionManager, req)\n\n                return originalOpen.call(xhr, method, req.url, async, username, password)\n            }\n        }\n    )\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nconst patchFns = {\n    _patchFetch: patchFetch,\n    _patchXHR: patchXHR,\n}\nassignableWindow.__PosthogExtensions__.tracingHeadersPatchFns = patchFns\n\n// we used to put tracingHeadersPatchFns on window, and now we put it on __PosthogExtensions__\n// but that means that old clients which lazily load this extension are looking in the wrong place\n// yuck,\n// so we also put it directly on the window\n// when 1.161.1 is the oldest version seen in production we can remove this\nassignableWindow.postHogTracingHeadersPatchFns = patchFns\n\nexport default patchFns\n"],"names":["patch","source","name","replacement","original","wrapped","prototype","Object","defineProperties","__posthog_wrapped__","enumerable","value","_unused","win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","assignableWindow","addTracingHeaders","sessionManager","req","_sessionManager$check","checkAndGetSessionAndWindowId","sessionId","windowId","headers","set","__PosthogExtensions__","patchFns","_patchFetch","originalFetch","_ref","_regeneratorRuntime","mark","_callee","url","init","wrap","_context","prev","next","Request","abrupt","stop","_x","_x2","apply","this","arguments","_patchXHR","originalOpen","method","async","length","username","password","call","tracingHeadersPatchFns","postHogTracingHeadersPatchFns"],"mappings":"27MAKO,SAASA,EACZC,EACAC,EACAC,GAEA,IACI,KAAMD,KAAQD,GACV,OAAO,aAKX,IAAMG,EAAWH,EAAOC,GAClBG,EAAUF,EAAYC,GAiB5B,MChBgB,mBDGDC,IAEXA,EAAQC,UAAYD,EAAQC,WAAa,CAAA,EACzCC,OAAOC,iBAAiBH,EAAS,CAC7BI,oBAAqB,CACjBC,YAAY,EACZC,OAAO,MAKnBV,EAAOC,GAAQG,EAER,WACHJ,EAAOC,GAAQE,EAEtB,CAAC,MAAAQ,GACE,OAAO,YAKX,CACJ,CE7BA,IAAMC,EAAkE,oBAAXC,OAAyBA,YAASC,EAgDzFC,EAA8D,oBAAfC,WAA6BA,WAAaJ,EAMlFK,EAAYF,aAAM,EAANA,EAAQE,UACTF,SAAAA,EAAQG,SACRH,SAAAA,EAAQI,SACXJ,SAAAA,EAAQK,MAEzBL,SAAAA,EAAQM,gBAAkB,oBAAqB,IAAIN,EAAOM,gBAAmBN,EAAOM,eACzDN,SAAAA,EAAQO,gBACdL,SAAAA,EAAWM,UAC7B,IAAMC,EAILZ,QAAAA,EAAQ,CAAU,EC9EpBa,EAAoB,SAACC,EAAkCC,GACzD,IAAAC,EAAgCF,EAAeG,+BAA8B,GAArEC,EAASF,EAATE,UAAWC,EAAQH,EAARG,SACnBJ,EAAIK,QAAQC,IAAI,uBAAwBH,GACxCH,EAAIK,QAAQC,IAAI,sBAAuBF,EAC3C,EAkDAP,EAAiBU,sBAAwBV,EAAiBU,uBAAyB,GACnF,IAAMC,EAAW,CACbC,YAlDe,SAACV,GAGhB,OAAO3B,EAAMc,EAAQ,SAAS,SAACwB,GAC3B,OAAA,WAAA,MAAAC,KAAAC,IAAAC,MAAO,SAAAC,EAAgBC,EAAwBC,GAA8B,IAAAhB,EAAA,OAAAY,IAAAK,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAKnC,OAFhCpB,EAAM,IAAIqB,QAAQN,EAAKC,GAE7BlB,EAAkBC,EAAgBC,GAAIkB,EAAAI,gBAE/BZ,EAAcV,IAAI,KAAA,EAAA,IAAA,MAAA,OAAAkB,EAAAK,OAAA,GAAAT,EAC5B,mLAAA,OAAAU,SAAAA,EAAAC,GAAA,OAAAd,EAAAe,MAAAC,KAAAC,UAAA,CAAA,CARD,EASJ,GACJ,EAqCIC,UAnCa,SAAC9B,GACd,OAAO3B,EAEHc,EAAQQ,eAAehB,UACvB,QAGA,SAACoD,GACG,OAAO,SACHC,EACAhB,GAIF,IAHEiB,IAAKJ,UAAAK,OAAA,QAAA9C,IAAAyC,UAAA,KAAAA,UAAA,GACLM,EAAwBN,UAAAK,OAAAL,EAAAA,kBAAAzC,EACxBgD,EAAwBP,UAAAK,OAAAL,EAAAA,kBAAAzC,EASlBa,EAAM,IAAIqB,QAAQN,GAIxB,OAFAjB,EAAkBC,EAAgBC,GAE3B8B,EAAaM,KARRT,KAQkBI,EAAQ/B,EAAIe,IAAKiB,EAAOE,EAAUC,GAExE,GAER,GAOAtC,EAAiBU,sBAAsB8B,uBAAyB7B,EAOhEX,EAAiByC,8BAAgC9B"}